//--------------------------------------------------------------------------------
//	Copyright © 2015 Schneider Electric (Australia) Pty Ltd. All rights reserved.
//
// 	FILE:		ServerMon.ci
//
//	CREATED:	23/10/2009
//
//	SUMMARY:
//
//		Contains functions used by the Server Monitoring Genies.
//
//	PUBLIC FUNCTIONS:
//
//		TagExtensions_ParameterReset
//		TagExtensions_ParaemterGet
//		TagExtensions_IODeviceControl
//		TagExtensions_SetValue
//		TagExtensions_Toggle
//		TagExtensions_PagePopup
//
// 	REMARKS: 
//
//	USAGE:
//
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
//
//	Constants
//
//-----------------------------------------------------------------------------

STRING	c_VALUE_NOT_SPECIFIED	= "-2147483648";


//-----------------------------------------------------------------------------
//
//	Public Functions
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		TagExtensions_ParameterReset
//
//	SUMMARY:
//		Reset Tag Extensions Parameters back to default values
//
//	PARAMS:
//		None
//
//	RETURNS: 
//		None
//
//-----------------------------------------------------------------------------

FUNCTION TagExtensions_ParametersReset()
	// reset quality display style parameters
	ParameterPut("Page", "IgnoreValueQuality", "");
	ParameterPut("Page", "BadDitheringColor", "");
	ParameterPut("Page", "OverrideDitheringColor", "");
	ParameterPut("Page", "ControlInhibitDitheringColor", "");
	ParameterPut("Page", "BadTextBackgroundColor", "")
	ParameterPut("Page", "OverrideTextBackgroundColor", "")
	ParameterPut("Page", "ControlInhibitTextBackgroundColor", "")

	// reset qulaity tooltip parameters
	ParameterPut("Page", "EnableQualityToolTip", "");
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		TagExtensions_ParameterGet
//
//	SUMMARY:
//		Get INI / Project Parameters and save the read values in memory when
//		it is read the first time. Subsequent call will return the cached value
//		rather than reading from the file again to improve performance. The
//		cache values are clear once leaving the current page.
//
//	PARAMS:
//		section			- The parameter section name
//		parameter		- The parameter name
//		default			- The default value for the parameter
//
//	RETURNS: 
//		The value of the parameter as a string
//
//	REMARKS:
//		It uses page string variable _param_<section>_<parameter> to save
//		its value in memory.
//
//-----------------------------------------------------------------------------

STRING FUNCTION TagExtensions_ParameterGet(STRING section, STRING parameter, STRING default = "")
	STRING retValue;
	INT errLevelOld = ErrSetLevel(1);

	IF ("" = PageGetStr("_param_" + section + "_" + parameter)) THEN
		PageSetStr("_param_" + section + "_" + parameter, ">" + ParameterGet(section, parameter, default));
	END
	retValue = PageGetStr("_param_" + section + "_" + parameter);

	ErrSetLevel(errLevelOld);
	RETURN StrRight(retValue, StrLength(retValue) - 1);
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		TagExtensions_IODeviceControl
//
//	SUMMARY:
//		Disable / Enable the I/O device that is used for demonstration of Tag
//		Extensions in the Example project.
//
//	PARAMS:
//		disable			- Flag to indicate whether to disable / enable the
//							I/O device. 0 = disable, 1 = enable.
//							If not specified, defaults to 0 (enable).
//
//	RETURNS: 
//		0 if run successfully or error if failed.
//
//-----------------------------------------------------------------------------

INT FUNCTION TagExtensions_IODeviceControl(INT disable = 0)
	INT retValue = 274;
	STRING unit = "TagExt_PLC";
	STRING server = "IOServer";
	INT errLevelOld;
	INT msgHnd;

	IF (ProcessIsServer("IOServer", "", server)) THEN
		retValue = IODeviceControl(unit, 1, disable);
	ELSE
		errLevelOld = ErrSetLevel(1);
		IsError();
		msgHnd = MsgOpen(server, 0, 0);
		IF (msgHnd > -1) THEN
			retValue = MsgRPC(msgHnd, "IODeviceControl", "^"" + unit + "^",1," + IntToStr(disable) + "^"^",^"^"", 0);
			MsgClose(server, msgHnd);
		ELSE
			retValue = IsError();
		END
		ErrSetLevel(errLevelOld);
	END

	IF (0 <> retValue) THEN
		Prompt(ErrMsg(retValue));
	END
	
	RETURN retValue;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		TagExtensions_SetValue
//
//	SUMMARY:
//		Sets value to the the specified tag. If no value is specified, a Input
//		dialog will pop up to prompt the user to enter the value. If value is
//		specified, the value is set to the tag directly.
//
//	PARAMS:
//		tag				- The name of a variable tag / local variable
//		value			- The new value to be written to the tag
//							If not specified or equals "-2147483648",
//							a Input dialog will be pop up for the user to enter new value.
//
//	RETURNS: 
//		0 if run successfully or error if failed.
//
//-----------------------------------------------------------------------------

INT FUNCTION TagExtensions_SetValue(STRING tag, STRING value = c_VALUE_NOT_SPECIFIED)
	INT retValue = 274;
	INT errLevelOld = ErrSetLevel(1);
	
	IF (c_VALUE_NOT_SPECIFIED = value) THEN
		value = TagRead(tag);
		IsError();
		value = Input(tag, "@(Please enter value)" + ":", value);
		IF (IsError() = 299) THEN
			ErrSetLevel(errLevelOld);
			RETURN 299;
		END
	END
	retValue = TagWrite(tag, value);

	// error feedback
	IF (0 <> retValue) THEN
		Prompt(ErrMsg(retValue));
	END

	ErrSetLevel(errLevelOld);
	RETURN retValue;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		TagExtensions_Toggle
//
//	SUMMARY:
//		Toggles the value of the specified tag between 1 and 0. This function
//		also works with write-only tag.
//
//	PARAMS:
//		tag				- The name of a variable tag / local variable
//
//	RETURNS: 
//		0 if run successfully or error if failed.
//
//	REMARKS:
//		For tags that cannot be read. It uses page string variable
//		_toggle_<tag> to save its last value in memory.
//
//-----------------------------------------------------------------------------

INT FUNCTION TagExtensions_Toggle(STRING tag)
	INT retValue = 274;
	INT errLevelOld = ErrSetLevel(1);
	STRING value;

	value = TagRead(tag);
	IF ("" = value) THEN
		// uses page variable to toggle from last saved value
		IF ("" = PageGetStr("_toggle_" + tag)) THEN
			value = 0;
			PageSetStr("_toggle_" + tag, ">0");
		ELSE
			value = StrMid(PageGetStr("_toggle_" + tag), 1, 254);
		END
		
		// write to tag
		value = NOT StrToInt(Value);
		retValue = TagWrite(tag, value);

		// save value
		PageSetStr("_toggle_" + tag, ">" + value);
	ELSE
		// write to tag
		value = NOT StrToInt(Value);
		retValue = TagWrite(tag, value);
	END

	// error feedback
	IF (0 <> retValue) THEN
		Prompt(ErrMsg(retValue));
	END

	ErrSetLevel(errLevelOld);
	RETURN retValue;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		TagExtensions_SelectOverrideMode
//
//	SUMMARY:
//		Pops up a drop-down menu and lists the available override mode values
//		for the user to select.
//
//	PARAMS:
//		value			- The current value fo the override mode
//							If not specified, defaults to -1
//
//	RETURNS: 
//		The selected override mode or the task is halted if nothing is selected
//
//-----------------------------------------------------------------------------

INT FUNCTION TagExtensions_SelectOverrideMode(INT value = -1)
	INT retValue;
	INT AN, x = -1, y = -1, dummy;
	STRING checked = "";
	INT errLevelOld = ErrSetLevel(1);

	AN = KeyGetCursor();
	IF (AN > 0) THEN
		DspGetAnExtent(AN, dummy, x, y, dummy);
	END

	IF (0 = value) THEN checked = "!~" ELSE checked = "" END;
	DspPopupMenu(0, checked + StrToLocalText("0 - @(Override Mode is off)"));
	IF (1 = value) THEN checked = "!~" ELSE checked = "" END;
	DspPopupMenu(0, checked + StrToLocalText("1 - @(Static Mode) - @(Set value to Field value)"));
	IF (2 = value) THEN checked = "!~" ELSE checked = "" END;
	DspPopupMenu(0, checked + StrToLocalText("2 - @(Static Mode) - @(Set value to Valid value)"));
	IF (3 = value) THEN checked = "!~" ELSE checked = "" END;
	DspPopupMenu(0, checked + StrToLocalText("3 - @(Static Mode) - @(Set value to Override value)"));
	IF (4 = value) THEN checked = "!~" ELSE checked = "" END;
	DspPopupMenu(0, checked + StrToLocalText("4 - @(Dynamic Mode) - @(Track value to Valid value continuously)"));
	retValue = DspPopupMenu(-1, "", x, y) - 1;		// convert selection from 1-based to 0-based

	ErrSetLevel(errLevelOld);

	IF (retValue < 0) THEN
		Halt();
	END

	RETURN retValue;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		TagExtensions_PagePopup
//
//	SUMMARY:
//		Pops up a page in unique super genie mode.
//
//	PARAMS:
//		page			- The name of the page to display
//
//	RETURNS: 
//		Return value from WinNewAt()
//
//-----------------------------------------------------------------------------

INT FUNCTION TagExtensions_PagePopup(STRING page)
	INT	x, y;
	REAL	ScaleX, ScaleY;
	
	DspGetMouse(x, y);
	PageTransformCoords(WinNumber(), x, y, x, y, 0);
	ScaleX = StrToReal(PageInfo(16));
	ScaleY = StrToReal(PageInfo(17));
	x = x / ScaleX;
	y = y / ScaleY;

	RETURN WinNewAt(page, x, y, 1 + 4 + 256 + 512, "");
END
