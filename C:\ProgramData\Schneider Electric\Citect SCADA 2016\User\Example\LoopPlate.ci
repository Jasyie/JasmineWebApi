//	FILE:		LoopPlate.ci
//
//
//	DESCRIPTION:	This file contains various functions that show how 
//			you can pop up a Sequence of Events(SOE)diagram and display
//			events filtered by selected equipment.
//
// 	---------------------		Attach Comment Functions 	------------------------
//


//	FUNCTION:	SOE_PopUp
//
//	DESCRIPTION:	Pass in the equipment name and pop up a SOE window.
//

INT FUNCTION SOE_PopUp(STRING equipName)
	INT XCoor;
	INT YCoor;

	DspGetMouse(XCoor,YCoor);
	Ass(-2, 1, "'" + equipName + "'", 0);
	RETURN WinNewAt("!SOE_PopUp",XCoor,YCoor,1+4+512);
END

//	FUNCTION:	SOE_Init
//
//	DESCRIPTION:	Initialize the pop up SOE window. Filtering enents on selected equipment.
//
INT FUNCTION SOE_Init(STRING tableName, INT AN)
	STRING equipName = AssInfo(1, 0);
	INT session = AlarmFilterEditOpen(AN);

	IF session >= 0 THEN
		AlarmFilterEditSet(session, "Equipment=" + equipName + " OR Equipment=" + equipName + ".*");
		AlarmFilterEditCommit(session);
		AlarmFilterEditClose(session);
	END

	// initialize alarm columns
	TabAlmTable_LoadConfig(tableName);

	RETURN TRUE;
END

//	FUNCTION:	DisplayScaledProperty
//
//	DESCRIPTION:	Display scaled alarm properties.
//
REAL FUNCTION DisplayScaledProperty(STRING tagSPName, STRING almProperty)
	
	REAL highUnit;
	REAL lowUnit;
	REAL currentVal;
	
	highUnit = StrToReal(TagGetProperty(tagSPName,"EngUnitsHigh"));
	lowUnit = StrToReal(TagGetProperty(tagSPName,"EngUnitsLow"));
	
	IF lowUnit >= highUnit THEN
		RETURN highUnit;
	END
	currentVal = StrToReal(almProperty);
		
	RETURN  100/(highUnit - lowUnit)*(currentVal - lowUnit);
END

//	FUNCTION:	PidOnPageEntry
//
//	DESCRIPTION:	Initialize the PID popup page with a tag subscription and remember the original value of the tag.
//
FUNCTION PidOnPageEntry(STRING spTagName)
	INT hSub = TagSubscribe(spTagName);
	IF (hSub <> -1) THEN
		PageSetStr("SubSPTagName", spTagName);
		SubscriptionAddCallback(hSub, "_PidSPValueChangeEventHandler");
		PageSetInt("SubSPHandle", hSub);
		PageSetStr("SubSPLastValue", TagRead(spTagName));
	END
END

//	FUNCTION:	PidOnPageExit
//
//	DESCRIPTION:	Cleaning up when the PID popup page exit. 
//
FUNCTION PidOnPageExit()
	INT hSub;
	STRING spTagName = PageGetStr("SubSPTagName");
	IF ("" <> spTagName) THEN
		hSub = PageGetInt("SubSPHandle");
		IF (hSub <> -1) THEN
			SubscriptionRemoveCallback(hSub, "_PidSPValueChangeEventHandler");
		END
	END
END

//	FUNCTION:	PidSPValueChangeEventHandler
//
//	DESCRIPTION:	PID popup page call back function. 
//					Inject an event to SOE when the tag value changed.
//
FUNCTION _PidSPValueChangeEventHandler(INT hSub)
	STRING spTagName = SubscriptionGetInfo(hSub, "TagName");
	REAL valueNew = SubscriptionGetValue(hSub, 0);
	REAL valueLast = PageGetStr("SubSPLastValue");
	STRING displayMessage = "Setpoint changed from " + RealToStr(valueLast, 8, 2) + " to " + RealToStr(valueNew, 8, 2) + ".";
	SOEEventAdd(TimestampCurrent(), displayMessage, spTagName);
	PageSetStr("SubSPLastValue", valueNew);
END
