/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Copyright © 2015 Schneider Electric (Australia) Pty Ltd. All rights reserved.
//
// 	FILE:	Security.ci
//
//	DESCRIPTION:
//
//		Contains utility functions used on the security pages in the example projects.
//
//	PUBLIC FUNCTIONS:
//
//		RunMSSecurityExample1
//		RunMSSecurityExample2
//		RunPVSecurityExample1
//		RunPVSecurityExample2
//		ViewTextLog
//		ResetArgumentsMS
//		ResetArgumentsPV
//		ResetPageStrings
//		GetTagExpression
//		MonitorTagValuesMS
//		MonitorTagValuesPV
//				
// 	NOTES: 
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Module variables

STRING sOperationApproved			= "@(OPERATION APPROVED)";
STRING sAwaitingVerification		= "@(AWAITING VERIFICATION)";
STRING sMultiSignatureTagValues[13];
STRING sPrivilegeVerificationTagValues[25];


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			RunMSSecurityExample1
//
//     	GENERAL DESCRIPTION
//
//			Code behind the "Run Example" button for example 1 on the multi-signature page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION RunMSSecurityExample1()
	IF (MultiSignatureForm(	securitymseg1desc, 
							securitymseg1log, 
							securitymseg1user1, 
							securitymseg1user2, 
							securitymseg1user3, 
							securitymseg1user4)) THEN
		PageSetStr(1, sOperationApproved);
	ELSE
		PageSetStr(1, sAwaitingVerification);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			RunMSSecurityExample2
//
//     	GENERAL DESCRIPTION
//
//			Code behind the "Run Example" button for example 2 on the multi-signature page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION RunMSSecurityExample2()
	IF (MultiSignatureTagWrite(	securitymseg2tagName, 
								securitymseg2valueToWrite, 
								securitymseg2log, 
								securitymseg2user1, 
								securitymseg2user2, 
								securitymseg2user3, 
								securitymseg2user4)) THEN
		PageSetStr(2, sOperationApproved);
	ELSE
		PageSetStr(2, sAwaitingVerification);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			RunPVSecurityExample1
//
//     	GENERAL DESCRIPTION
//
//			Code behind the "Run Example" button for example 1 on the privilege verification page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION RunPVSecurityExample1()
	IF (VerifyPrivilegeForm(securitypveg1desc, 
							securitypveg1log,
							securitypveg1access, 
							securitypveg1gpriv, 
							securitypveg1priv1, 
							securitypveg1priv2, 
							securitypveg1priv3,
							securitypveg1priv4,
							securitypveg1priv5,
							securitypveg1priv6,
							securitypveg1priv7,
							securitypveg1priv8) <> "") THEN
		PageSetStr(1, sOperationApproved);
	ELSE
		PageSetStr(1, sAwaitingVerification);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			RunPVSecurityExample2
//
//     	GENERAL DESCRIPTION
//
//			Code behind the "Run Example" button for example 2 on the privilege verification page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION RunPVSecurityExample2()
	IF (VerifyPrivilegeTagWrite(securitypveg2tagName, 
								securitypveg2valueToWrite, 
								securitypveg2log,
								securitypveg2access, 
								securitypveg2gpriv, 
								securitypveg2priv1, 
								securitypveg2priv2, 
								securitypveg2priv3,
								securitypveg2priv4,
								securitypveg2priv5,
								securitypveg2priv6,
								securitypveg2priv7,
								securitypveg2priv8) <> "") THEN
		PageSetStr(2, sOperationApproved);
	ELSE
		PageSetStr(2, sAwaitingVerification);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ViewTextLog
//
//     	GENERAL DESCRIPTION
//
//			Opens a device text file for viewing.
//			
// 		ARGUMENTS:
//
//			sDevice	- The name of the ascii device.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION ViewTextLog(STRING sDevice)
	INT hDev;
	STRING sFile;
	
	hDev = DevOpen(sDevice, 0);
	IF (hDev <> -1) THEN
		sFile = DevInfo(hDev, 3);	// File name
		Exec("notepad " + sFile);
		DevClose(hDev);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ResetArgumentsMS
//
//     	GENERAL DESCRIPTION
//
//			Resets the test local variables used on the SecurityUV page in the example projects.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION ResetArgumentsMS()
	securitymseg1desc = "Open Spillway";
	securitymseg1log = "ApprovalLog";
	securitymseg1user1 = "seniorengineer";
	securitymseg1user2 = "shiftsupervisor";
	securitymseg1user3 = GetEnv("COMPUTERNAME") + "\administrator";
	securitymseg1user4 = "DOMAIN\mike.manager";	

	securitymseg2tagName = "securitymseg2tag";
	securitymseg2valueToWrite = "42";
	securitymseg2log = "ApprovalLog";
	securitymseg2user1 = "seniorengineer";
	securitymseg2user2 = "shiftsupervisor";
	securitymseg2user3 = GetEnv("COMPUTERNAME") + "\administrator";
	securitymseg2user4 = "DOMAIN\mike.manager";
	securitymseg2tag = "0";
	
	ResetPageStrings();	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ResetArgumentsPV
//
//     	GENERAL DESCRIPTION
//
//			Resets the test local variables used on the SecurityPV page in the example projects.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION ResetArgumentsPV()
	securitypveg1desc = "Open Spillway";
	securitypveg1log = "ApprovalLog";
	securitypveg1access = "PlantWide";
	securitypveg1gpriv = "8";
	securitypveg1priv1 = "";
	securitypveg1priv2 = "";
	securitypveg1priv3 = "";
	securitypveg1priv4 = "";
	securitypveg1priv5 = "";
	securitypveg1priv6 = "";
	securitypveg1priv7 = "";
	securitypveg1priv8 = "";		
	
	securitypveg2tagName = "securitypveg2tag";
	securitypveg2valueToWrite = "42";
	securitypveg2log = "ApprovalLog";
	securitypveg2access = "PlantWide";
	securitypveg2gpriv = "8";
	securitypveg2priv1 = "";
	securitypveg2priv2 = "";
	securitypveg2priv3 = "";
	securitypveg2priv4 = "";
	securitypveg2priv5 = "";
	securitypveg2priv6 = "";
	securitypveg2priv7 = "";
	securitypveg2priv8 = "";
	securitypveg2tag = "0";
	
	ResetPageStrings();	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ResetPageStrings
//
//     	GENERAL DESCRIPTION
//
//			Reset the page string variables (for the security example pages).
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION ResetPageStrings()
	PageSetStr(1, sAwaitingVerification);
	PageSetStr(2, sAwaitingVerification);
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			GetTagExpression
//
//     	GENERAL DESCRIPTION
//
//			Long-running task to perform TagRead on specify tag and update page variable.
//			
// 		ARGUMENTS:
//
//			sTagName - The name of a tag containing the name of a tag to read.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION GetTagExpression(STRING sTagName)

	STRING sTagToRead;
	STRING sTagValue;
	ErrSet(1);
	
	WHILE (1) DO
		sTagToRead = TagRead(sTagName);
		sTagValue = TagRead(sTagToRead);
		
		IF (IsError()) THEN
			PageSetStr(3, sTagToRead  + " = <Invalid Tag>");
		ELSE
			PageSetStr(3, sTagToRead  + " = " + TagRead(sTagToRead));
		END
		
		SleepMS(500);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			MonitorTagValuesMS
//
//     	GENERAL DESCRIPTION
//
//			Long-running task to monitor for changes to tag values on the multi-signature page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION MonitorTagValuesMS()

	UpdateTagValueArrayMS();
	
	WHILE (1) DO
	
		IF (ValuesHaveBeenChangedMSEg1()) THEN
			PageSetStr(1, sAwaitingVerification);
		END
		IF (ValuesHaveBeenChangedMSEg2()) THEN
			PageSetStr(2, sAwaitingVerification);
		END
		
		UpdateTagValueArrayMS();
		Sleep(1);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ValuesHaveBeenChangedMSEg1
//
//     	GENERAL DESCRIPTION
//
//			Determines if any values have been changed in example 1 on the multi-signature page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			TRUE if values have been changed, otherwise FALSE.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PRIVATE INT FUNCTION ValuesHaveBeenChangedMSEg1()
	INT nChanged = FALSE;
	
	IF (sMultiSignatureTagValues[0] <> securitymseg1desc OR
		sMultiSignatureTagValues[1] <> securitymseg1log OR
		sMultiSignatureTagValues[2] <> securitymseg1user1 OR
		sMultiSignatureTagValues[3] <> securitymseg1user2 OR
		sMultiSignatureTagValues[4] <> securitymseg1user3 OR
		sMultiSignatureTagValues[5] <> securitymseg1user4) THEN
		
		nChanged = TRUE;
	END
	
	RETURN nChanged;
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ValuesHaveBeenChangedMSEg2
//
//     	GENERAL DESCRIPTION
//
//			Determines if any values have been changed in example 2 on the multi-signature page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			TRUE if values have been changed, otherwise FALSE.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PRIVATE INT FUNCTION ValuesHaveBeenChangedMSEg2()
	INT nChanged = FALSE;
	
	IF (sMultiSignatureTagValues[6] <> securitymseg2tagName OR
		sMultiSignatureTagValues[7] <> securitymseg2valueToWrite OR
		sMultiSignatureTagValues[8] <> securitymseg2log OR
		sMultiSignatureTagValues[9] <> securitymseg2user1 OR
		sMultiSignatureTagValues[10] <> securitymseg2user2 OR
		sMultiSignatureTagValues[11] <> securitymseg2user3 OR
		sMultiSignatureTagValues[12] <> securitymseg2user4) THEN
		
		nChanged = TRUE;
	END
	
	RETURN nChanged;
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			UpdateTagValueArrayMS
//
//     	GENERAL DESCRIPTION
//
//			Updates the array of tag values for the two examples on the multi-signature page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			TRUE if values have been changed, otherwise FALSE.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PRIVATE FUNCTION UpdateTagValueArrayMS()

	sMultiSignatureTagValues[0] = securitymseg1desc;
	sMultiSignatureTagValues[1] = securitymseg1log;
	sMultiSignatureTagValues[2] = securitymseg1user1;
	sMultiSignatureTagValues[3] = securitymseg1user2;
	sMultiSignatureTagValues[4] = securitymseg1user3;
	sMultiSignatureTagValues[5] = securitymseg1user4;
	
	sMultiSignatureTagValues[6] = securitymseg2tagName;
	sMultiSignatureTagValues[7] = securitymseg2valueToWrite;
	sMultiSignatureTagValues[8] = securitymseg2log;
	sMultiSignatureTagValues[9] = securitymseg2user1;
	sMultiSignatureTagValues[10] = securitymseg2user2;
	sMultiSignatureTagValues[11] = securitymseg2user3;
	sMultiSignatureTagValues[12] = securitymseg2user4;
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			MonitorTagValuesPV
//
//     	GENERAL DESCRIPTION
//
//			Long-running task to monitor for changes to tag values on the privilege verification page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			None.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION MonitorTagValuesPV()

	UpdateTagValueArrayPV();
	
	WHILE (1) DO
	
		IF (ValuesHaveBeenChangedPVEg1()) THEN
			PageSetStr(1, sAwaitingVerification);
		END
		IF (ValuesHaveBeenChangedPVEg2()) THEN
			PageSetStr(2, sAwaitingVerification);
		END
		
		UpdateTagValueArrayPV();
		Sleep(1);
	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ValuesHaveBeenChangedPVEg1
//
//     	GENERAL DESCRIPTION
//
//			Determines if any values have been changed in example 1 on the privilege verification page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			TRUE if values have been changed, otherwise FALSE.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PRIVATE INT FUNCTION ValuesHaveBeenChangedPVEg1()
	INT nChanged = FALSE;
	
	IF (sPrivilegeVerificationTagValues[0] <> securitypveg1desc OR
		sPrivilegeVerificationTagValues[1] <> securitypveg1log OR
		sPrivilegeVerificationTagValues[2] <> securitypveg1access OR
		sPrivilegeVerificationTagValues[3] <> securitypveg1gpriv OR
		sPrivilegeVerificationTagValues[4] <> securitypveg1priv1 OR
		sPrivilegeVerificationTagValues[5] <> securitypveg1priv2 OR
		sPrivilegeVerificationTagValues[6] <> securitypveg1priv3 OR
		sPrivilegeVerificationTagValues[7] <> securitypveg1priv4 OR
		sPrivilegeVerificationTagValues[8] <> securitypveg1priv5 OR
		sPrivilegeVerificationTagValues[9] <> securitypveg1priv6 OR
		sPrivilegeVerificationTagValues[10] <> securitypveg1priv7 OR
		sPrivilegeVerificationTagValues[11] <> securitypveg1priv8) THEN
		
		nChanged = TRUE;
	END
	
	RETURN nChanged;
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			ValuesHaveBeenChangedPVEg2
//
//     	GENERAL DESCRIPTION
//
//			Determines if any values have been changed in example 2 on the privilege verification page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			TRUE if values have been changed, otherwise FALSE.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PRIVATE INT FUNCTION ValuesHaveBeenChangedPVEg2()
	INT nChanged = FALSE;
	
	IF (sPrivilegeVerificationTagValues[12] <> securitypveg2tagName OR
		sPrivilegeVerificationTagValues[13] <> securitypveg2valueToWrite OR
		sPrivilegeVerificationTagValues[14] <> securitypveg2log OR
		sPrivilegeVerificationTagValues[15] <> securitypveg2access OR
		sPrivilegeVerificationTagValues[16] <> securitypveg2gpriv OR
		sPrivilegeVerificationTagValues[17] <> securitypveg2priv1 OR
		sPrivilegeVerificationTagValues[18] <> securitypveg2priv2 OR
		sPrivilegeVerificationTagValues[19] <> securitypveg2priv3 OR
		sPrivilegeVerificationTagValues[20] <> securitypveg2priv4 OR
		sPrivilegeVerificationTagValues[21] <> securitypveg2priv5 OR
		sPrivilegeVerificationTagValues[22] <> securitypveg2priv6 OR
		sPrivilegeVerificationTagValues[23] <> securitypveg2priv7 OR
		sPrivilegeVerificationTagValues[24] <> securitypveg2priv8) THEN
		
		nChanged = TRUE;
	END
	
	RETURN nChanged;
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//			UpdateTagValueArrayPV
//
//     	GENERAL DESCRIPTION
//
//			Updates the array of tag values for the two examples on the privilege verification page.
//			
// 		ARGUMENTS:
//
//			None.
//			
//     	RETURNED VALUE: 
//
//			TRUE if values have been changed, otherwise FALSE.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PRIVATE FUNCTION UpdateTagValueArrayPV()

	sPrivilegeVerificationTagValues[0] = securitypveg1desc;
	sPrivilegeVerificationTagValues[1] = securitypveg1log;
	sPrivilegeVerificationTagValues[2] = securitypveg1access;
	sPrivilegeVerificationTagValues[3] = securitypveg1gpriv;
	sPrivilegeVerificationTagValues[4] = securitypveg1priv1;
	sPrivilegeVerificationTagValues[5] = securitypveg1priv2;
	sPrivilegeVerificationTagValues[6] = securitypveg1priv3;
	sPrivilegeVerificationTagValues[7] = securitypveg1priv4;
	sPrivilegeVerificationTagValues[8] = securitypveg1priv5;
	sPrivilegeVerificationTagValues[9] = securitypveg1priv6;
	sPrivilegeVerificationTagValues[10] = securitypveg1priv7;
	sPrivilegeVerificationTagValues[11] = securitypveg1priv8;

	sPrivilegeVerificationTagValues[12] = securitypveg2tagName;
	sPrivilegeVerificationTagValues[13] = securitypveg2valueToWrite;
	sPrivilegeVerificationTagValues[14] = securitypveg2log;
	sPrivilegeVerificationTagValues[15] = securitypveg2access;
	sPrivilegeVerificationTagValues[16] = securitypveg2gpriv;
	sPrivilegeVerificationTagValues[17] = securitypveg2priv1;
	sPrivilegeVerificationTagValues[18] = securitypveg2priv2;
	sPrivilegeVerificationTagValues[19] = securitypveg2priv3;
	sPrivilegeVerificationTagValues[20] = securitypveg2priv4;
	sPrivilegeVerificationTagValues[21] = securitypveg2priv5;
	sPrivilegeVerificationTagValues[22] = securitypveg2priv6;
	sPrivilegeVerificationTagValues[23] = securitypveg2priv7;
	sPrivilegeVerificationTagValues[24] = securitypveg2priv8;
END
