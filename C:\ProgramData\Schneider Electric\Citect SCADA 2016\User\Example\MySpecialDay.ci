
// ---------------------------------------------------------------------------
// File: MySpecialDay.ci
// ---------------------------------------------------------------------------
//
// ---------------------------------------------------------------------------
// Interface for access to special day calendar properties
//
// MySpDay_
//
// DspMonth:     Used to display a specific month on the special day calendar display.
// DspNextMonth: Used to display the next month on the special day calendar display.
// DspPrevMonth: Used to display the previous month on the special day calendar display.
// AddSelected:  Used to add a selected day to the special day calendar display.
//
// Parameters
// sCalendar:    The calendar name. Each calendar on a page must have a unique name.
// Month:        The month to be displayed. This is the actual month when year is specified.
//               Otherwsie, it is an offset from the current month (e.g. -5, -1, 1, 8, etc.)
// Year:         The year to be displayed.
//
// ---------------------------------------------------------------------------

FUNCTION MySpDay_DspMonth(STRING sCalendar, INT nMonth = -99, INT nYear = -1)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");

	// Get the current year if requested
	IF (nYear = -1) THEN
		IF ((StrLength(sDspInfo) = 0) OR (nMonth = -99)) THEN
			nYear = TimestampGetPart(TimestampCurrent(), 0);
			IF (nMonth = -99) THEN nMonth = TimestampGetPart(TimestampCurrent(), 1); END
		ELSE
			nYear = StrToInt(StrWord(sDspInfo));
		END
	END

	// Set the specified month
	_MySpDay_SetMonth(sCalendar, nMonth, nYear);
END

FUNCTION MySpDay_DspNextMonth(STRING sCalendar)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));

	// Set the month forward by one
	_MySpDay_SetMonth(sCalendar, nMonth + 1, nYear);
END

FUNCTION MySpDay_DspPrevMonth(STRING sCalendar)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));

	// Set the month backward by one
	_MySpDay_SetMonth(sCalendar, nMonth - 1, nYear);
END

INT FUNCTION MySpDay_Load(STRING sCalendar, STRING sCategory, STRING sCurrPage)

	ErrSet(1);

	STRING sCluster = _MySpDay_GetField(sCalendar, 0, "Cluster");
	INT hSession = -1;
	INT bDone = FALSE;
	INT bClear = TRUE;

	IF (StrLength(sCluster) = 0) THEN sCluster = PageInfo(26); END

	_MySpDay_SetField(sCalendar, 0, "Version", ServerGetProperty("", "SchedulingDiskTime", sCluster, "Report"));

	hSession = SchdSpecialItemOpen("GroupName=^""+sCategory+"^"", "GroupName,Name,Day,ID", sCluster);
	IF (hSession = -1) THEN RETURN (FALSE); END

	SchdSpecialItemFirst(hSession);
	IF (SchdSpecialItemNumRecords(hSession) > 0) THEN
	WHILE (NOT bDone) DO

		_MySpDay_AddSelected(sCalendar, StrToTimestamp(SchdSpecialItemGetField(hSession, "Day"),15,0),
								SchdSpecialItemGetField(hSession, "Name"), bClear);
		bClear = FALSE;

		IF (SchdSpecialItemNext(hSession) > 0) THEN bDone = TRUE; END
		IF (sCurrPage <> PageInfo(0)) THEN bDone = TRUE; END
	END
	END

	SchdSpecialItemClose(hSession);
	RETURN (TRUE);
END





















// ---------------------------------------------------------------------------
// Internal Functions
//
// The following functions are used within the genies and support functions
// and are not designed to be called directly from user Cicode
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Interface for access to field values for a calendar
//
// SetName:  Used to set a name for graphics objects within the calendar.
// SetField: Used to set a field value for a calendar.
// GetField: Used to access the field value of a calendar.
//
// Parameters
// Calendar: The calendar name. Each calendar on a page must have a unique name.
// Weekday:  The weekday number. Valid weekday columns are 1..7 or 51..100.
// WeekNum:  The week number. Valid week rows are 1..6.
// Index:    The index number. Valid numbers are 1..100.
// Field:    The field name.
// Value:    The value for the field.
//
// ---------------------------------------------------------------------------

INT FUNCTION _MySpDay_SetName(STRING sCalendar, INT nWeekday = 0, INT nWeekNum = 0)

	ErrSet(1);

	INT nCurrIndex = 0;
	IF (nWeekday > 0) THEN nCurrIndex = nWeekday + (7 * (nWeekNum-1)); END
	IF (nWeekday > 50) THEN nCurrIndex = nWeekday; END

	RETURN (_MySpDay_SetANName("_CalVw_"+sCalendar+"_"+IntToStr(nCurrIndex)));
END

FUNCTION _MySpDay_SetField(STRING sCalendar, INT nIndex, STRING sField, STRING sValue)

	ErrSet(1);

	INT nCalAN = _MySpDay_GetANName("_CalVw_"+sCalendar+"_"+IntToStr(nIndex));

	DspAnSetMetadata(nCalAN, sField, sValue);
END

STRING FUNCTION _MySpDay_GetField(STRING sCalendar, INT nIndex, STRING sField)

	ErrSet(1);

	INT nCalAN = _MySpDay_GetANName("_CalVw_"+sCalendar+"_"+IntToStr(nIndex));

	IF (nCalAN <= 0) THEN RETURN (""); END
	RETURN (DspAnGetMetadata(nCalAN, sField));
END

INT FUNCTION _MySpDay_SetANName(STRING sName)

	// Returns 0 when successfull, > 0 on error
	RETURN (PageSetInt("#AN_"+sName, DspGetAnCur()));
END

INT FUNCTION _MySpDay_GetANName(STRING sName)

	RETURN (PageGetInt("#AN_"+sName));
END

FUNCTION _MySpDay_SetMonth(STRING sCalendar, INT nMonth, INT nYear)

	ErrSet(1);

	TIMESTAMP tsCurrMonth;
	TIMESTAMP tsPrevMonth;

	// Check for valid data
	IF (nYear < 1) THEN RETURN; END

	// Adjust Year based on month
	IF (nMonth < 1) THEN
		nYear = nYear - (((1 - nMonth) / 12) + 1);
		nMonth = 12 - ((0 - nMonth) MOD 12);
	END 
	IF (nMonth > 12) THEN
		nYear = nYear + (((nMonth - 12) / 12) + 1);
		nMonth = ((nMonth - 12) MOD 12);
		IF (nMonth = 0) THEN nMonth = 12; nYear = nYear - 1; END
	END 

	tsCurrMonth = TimestampCreate(nYear, nMonth, 01, 00, 00, 00, 00, 0);
	tsPrevMonth = TimestampSub(tsCurrMonth, 1, 2);

	// Set display information: Year Month StartWeekday NumDays PrevNumDays
	_MySpDay_SetField(sCalendar, 0, "DspInfo", IntToStr(nYear)+" "+IntToStr(nMonth)+" "+
						IntToStr(_MySpDay_GetStartWeekday(tsCurrMonth))+" "+
						IntToStr(_MySpDay_GetNumDays(tsCurrMonth))+" "+
						IntToStr(_MySpDay_GetNumDays(tsPrevMonth)));

	_MySpDay_SetField(sCalendar, 0, "LabelMonth", _MySpDay_GetDspMonth(sCalendar, nMonth, nYear, TRUE));

	TaskNew("_MySpDay_SetDspDay", "^""+sCalendar+"^"", 1);
END

INT FUNCTION _MySpDay_GetStartWeekday(TIMESTAMP tsDate)

	ErrSet(1);

	// Create a reference to first Sunday after 1st Jan 1970
	TIMESTAMP tsRef = TimestampCreate(1970, 01, 04, 12, 00, 00, 00, 0);
	// Get the number of days since reference date
	INT nDays = TimestampDifference(tsDate, tsRef, 2, 1);
	// Calculate the day of the week as number from 0 to 6
	INT nWeekday = nDays MOD 7;

	// Return the day of the week as a number from 1 to 7; Sun = 1, Sat = 7
	RETURN (nWeekday + 1);
END

INT FUNCTION _MySpDay_GetNumDays(TIMESTAMP tsDate)

	ErrSet(1);

	// Get the month from reference date
	INT nCurrMonth = TimestampGetPart(tsDate, 1, 0);
	// Get the year from reference date
	INT nCurrYear = TimestampGetPart(tsDate, 0, 0);

	// Leap year is determined by the following calculation
	IF (nCurrMonth = 2) THEN
		IF ((nCurrYear MOD 4) = 0 AND (nCurrYear MOD 100) <> 0 OR (nCurrYear MOD 400) = 0) THEN 
			RETURN 29;
		ELSE 
			RETURN 28;
		END
	END
	
	// Determine the number of days by the English rhyme
	IF (nCurrMonth = 9 OR nCurrMonth = 4 OR nCurrMonth = 6 OR nCurrMonth = 11) THEN
		RETURN 30;
	ELSE
		RETURN 31;
	END
END

STRING FUNCTION _MySpDay_GetDspDay(STRING sCalendar, INT nWeekday, INT nWeekNum)

	RETURN (_MySpDay_GetField(sCalendar, nWeekday + (7 * (nWeekNum-1)), "DspDay"));
END

STRING FUNCTION _MySpDay_GetDspMonth(STRING sCalendar, INT nMonth, INT nYear = 1970, INT bShowYear = FALSE)

	ErrSet(1);

	TIMESTAMP tsCurrMonth = TimestampCreate(nYear, nMonth, 01, 00, 00, 00, 00, 0);

	IF (bShowYear) THEN	RETURN (TimestampFormat(tsCurrMonth, "MMM yyyy", 0)); END
	RETURN (TimestampFormat(tsCurrMonth, "MMM", 0));
END

FUNCTION _MySpDay_SetDspDay(STRING sCalendar)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));
	INT nStartWeekday = StrToInt(StrWord(sDspInfo));
	INT nNumDays = StrToInt(StrWord(sDspInfo));
	INT nNumDaysPrev = StrToInt(StrWord(sDspInfo));
	INT nCurrIndex;
	INT nWeekday;
	INT nDspDay = 0;

	// Check for valid data range
	IF ((nStartWeekday < 1) OR (nStartWeekday > 7)) THEN RETURN; END
	IF ((nNumDays < 1) OR (nNumDays > 31)) THEN RETURN; END

	FOR nCurrIndex = 1 TO 42 DO
		// Return the date for current and next month
		nDspDay = nCurrIndex;
		IF (nDspDay > (nStartWeekday + nNumDays)) THEN nDspDay = nDspDay - nNumDays; END
		IF (nDspDay > nStartWeekday) THEN
			nDspDay = (nDspDay - nStartWeekday);
		ELSE
			// Return the date for previous month
			nWeekday = nCurrIndex MOD 7; IF (nWeekday = 0) THEN nWeekday = 7; END
			nDspDay = (nNumDaysPrev - (nStartWeekday - nWeekday));
		END

		_MySpDay_SetField(sCalendar, nCurrIndex, "DspDay", IntToStr(nDspDay));
	END
END

INT FUNCTION _MySpDay_IsToday(STRING sCalendar, INT nWeekday, INT nWeekNum)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));
	INT nStartWeekday = StrToInt(StrWord(sDspInfo));
	STRING sServerVer;
	STRING sCluster;
	INT nServerCheck;
	INT nDelay = 2;

	INT nCurrIndex = nWeekday + (7 * (nWeekNum-1));
	INT nCurrMonth = TimestampGetPart(TimestampCurrent(), 1, 0);
	INT nCurrYear = TimestampGetPart(TimestampCurrent(), 0, 0);
	INT nCurrDay;

	IF ((nWeekday = 1) AND (nWeekNum = 1)) THEN
		IF (StrLength(_MySpDay_GetField(sCalendar, 0, "IsInit")) = 0) THEN nDelay = 0; END

		// Run update task every 3 seconds to load data for calendar
		nServerCheck = StrToInt(_MySpDay_GetField(sCalendar, 0, "LastUpdate"));
		IF (TimeCurrent() > nServerCheck + nDelay) THEN
			_MySpDay_SetField(sCalendar, 0, "LastUpdate", IntToStr(TimeCurrent()));
			sCluster = _MySpDay_GetField(sCalendar, 0, "Cluster");
			IF (StrLength(sCluster) = 0) THEN sCluster = PageInfo(26); END
			TaskNew("_MySpDay_UpdateDataTask", "^""+sCalendar+"^","+IntToStr(nCurrYear)+","+IntToStr(nCurrMonth)+",^""+sCluster+"^"", 1);
		END
	END

	// Check if the year and month are valid for today
	IF (nYear <> nCurrYear) THEN RETURN (FALSE); END
	IF (nMonth <> nCurrMonth) THEN RETURN (FALSE); END

	// Calculate if the current index is today
	nCurrDay = TimestampGetPart(TimestampCurrent(), 2, 0);
	RETURN (nCurrDay = nCurrIndex - nStartWeekday);
END

INT FUNCTION _MySpDay_IsActive(STRING sCalendar, INT nWeekday, INT nWeekNum)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));
	INT nStartWeekday = StrToInt(StrWord(sDspInfo));
	INT nNumDays = StrToInt(StrWord(sDspInfo));
	INT nCurrIndex = nWeekday + (7 * (nWeekNum-1));

	// Check for valid data range
	IF ((nStartWeekday < 1) OR (nStartWeekday > 7)) THEN RETURN (FALSE); END
	IF ((nNumDays < 1) OR (nNumDays > 31)) THEN RETURN (FALSE); END

	// Check if the current index is before the start of the month
	IF (nCurrIndex <= nStartWeekday) THEN RETURN (FALSE); END
	// Check if the current index is after the end of the month
	IF (nCurrIndex > (nStartWeekday + nNumDays)) THEN RETURN (FALSE); END

	RETURN (TRUE);
END

INT FUNCTION _MySpDay_IsSelected(STRING sCalendar, INT nWeekday, INT nWeekNum, INT bSetTooltip = FALSE)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));
	INT nStartWeekday = StrToInt(StrWord(sDspInfo));
	INT nNumDays = StrToInt(StrWord(sDspInfo));
	INT nSelYear = StrToInt(_MySpDay_GetField(sCalendar, 0, "SelectYear"));

	INT nCurrIndex = nWeekday + (7 * (nWeekNum-1));
	INT nDay = _MySpDay_GetDspDay(sCalendar, nWeekday, nWeekNum);
	INT nSelectMask;
	INT nBitMask;
	INT nLabelMask;
	STRING sLabel;

	// Check for valid data range
	IF ((nStartWeekday < 1) OR (nStartWeekday > 7)) THEN RETURN (FALSE); END
	IF ((nNumDays < 1) OR (nNumDays > 31)) THEN RETURN (FALSE); END
	// Check if the data is available
	IF ((nYear < nSelYear) OR (nYear > nSelYear+2)) THEN RETURN (FALSE); END

	// Check if the current index is in the prev or next month
	IF (nCurrIndex <= nStartWeekday) THEN nMonth = nMonth - 1; END
	IF (nCurrIndex > (nStartWeekday + nNumDays)) THEN nMonth = nMonth + 1; END

	// Get the select mask
	nSelYear = nYear - nSelYear + 1;
	IF ((nSelYear < 1) OR (nSelYear > 3)) THEN RETURN (FALSE); END
	nSelectMask = StrToInt(_MySpDay_GetField(sCalendar, nMonth, "Select"+IntToStr(nSelYear)));
	nBitMask = Pow(2, nDay-1);

	// Check if selected
	IF ((nSelectMask BITAND nBitMask) > 0) THEN
		IF (bSetTooltip) THEN
			sLabel = _MySpDay_GetField(sCalendar, nDay, "Label"+IntToStr(nMonth)+"_"+IntToStr(nSelYear));
			DspSetTip(DspGetAnCur(), sLabel);
		END
		RETURN (TRUE);
	END

	// Date is not selected
	IF (bSetTooltip) THEN DspSetTip(DspGetAnCur(), ""); END
	RETURN (FALSE);
END

INT FUNCTION _MySpDay_HasSelected(STRING sCalendar, INT nMonth)

	ErrSet(1);

	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nSelYear = StrToInt(_MySpDay_GetField(sCalendar, 0, "SelectYear"));
	INT nSelectMask;

	// Get the select mask
	nSelYear = nYear - nSelYear + 1;
	IF ((nSelYear < 1) OR (nSelYear > 3)) THEN RETURN (FALSE); END
	nSelectMask = StrToInt(_MySpDay_GetField(sCalendar, nMonth, "Select"+IntToStr(nSelYear)));

	RETURN (nSelectMask > 0);
END

FUNCTION _MySpDay_AddSelected(STRING sCalendar, TIMESTAMP tsDate, STRING sLabel = "", INT bClearAll = FALSE)

	ErrSet(1);

	INT nSelYear = StrToInt(_MySpDay_GetField(sCalendar, 0, "SelectYear"));
	INT nYear = TimestampGetPart(tsDate, 0, 0);
	INT nMonth;
	INT nDay;
	INT nSelectMask;
	INT nBitMask;

	// Check or reset the current selections
	IF ((bClearAll) OR (nSelYear = 0)) THEN
		nSelYear = nYear;
		_MySpDay_SetField(sCalendar, 0, "SelectYear", IntToStr(nSelYear));
		FOR nMonth = 1 TO 12 DO
			_MySpDay_SetField(sCalendar, nMonth, "Select1", "0");
			_MySpDay_SetField(sCalendar, nMonth, "Select2", "0");
			_MySpDay_SetField(sCalendar, nMonth, "Select3", "0");
		END
	END

	// Calculate month index based on select year offset
	nMonth = TimestampGetPart(tsDate, 1, 0);
	nDay = TimestampGetPart(tsDate, 2, 0);

	// Get the select mask
	nSelYear = nYear - nSelYear + 1;
	IF ((nSelYear < 1) OR (nSelYear > 3)) THEN RETURN; END
	nSelectMask = StrToInt(_MySpDay_GetField(sCalendar, nMonth, "Select"+IntToStr(nSelYear)));
	nBitMask = Pow(2, nDay-1);
	nSelectMask = nSelectMask BITOR nBitMask;

	// Add new entry to calendar
	_MySpDay_SetField(sCalendar, nMonth, "Select"+IntToStr(nSelYear), IntToStr(nSelectMask));
	IF (StrLength(sLabel) > 0) THEN 
		_MySpDay_SetField(sCalendar, nDay, "Label"+IntToStr(nMonth)+"_"+IntToStr(nSelYear), sLabel);
	END
END

FUNCTION _MySpDay_DelSelected(STRING sCalendar, TIMESTAMP tsDate)

	ErrSet(1);

	INT nSelYear = StrToInt(_MySpDay_GetField(sCalendar, 0, "SelectYear"));
	INT nYear = TimestampGetPart(tsDate, 0, 0);
	INT nMonth = TimestampGetPart(tsDate, 1, 0);
	INT nDay = TimestampGetPart(tsDate, 2, 0);
	INT nSelectMask;
	INT nBitMask;

	// Get the select mask
	nSelYear = nYear - nSelYear + 1;
	IF ((nSelYear < 1) OR (nSelYear > 3)) THEN RETURN; END
	nSelectMask = StrToInt(_MySpDay_GetField(sCalendar, nMonth, "Select"+IntToStr(nSelYear)));
	nBitMask = Pow(2, nDay-1);
	nBitMask = nBitMask BITXOR 0xFFFFFFFF;
	nSelectMask = nSelectMask BITAND nBitMask;
	_MySpDay_SetField(sCalendar, nMonth, "Select"+IntToStr(nSelYear), IntToStr(nSelectMask));
END

FUNCTION _MySpDay_UpdateDataTask(STRING sCalendar, INT nYear, INT nMonth, STRING sCluster)

	ErrSet(1);

	STRING sServerVer;

	// Check if the calendar is initialized
	IF (StrLength(_MySpDay_GetField(sCalendar, 0, "IsInit")) = 0) THEN
		TaskNew("_MySpDay_Initalize", "^""+sCalendar+"^","+IntToStr(nYear)+","+IntToStr(nMonth)+"^""+sCluster+"^"", 1+8);
		RETURN;
	END

	// Check if the source version has been updated
	sServerVer = _MySpDay_GetField(sCalendar, 0, "Version");
	IF (StrLength(sServerVer) > 0) THEN
		IF (sServerVer <> ServerGetProperty("", "SchedulingDiskTime", sCluster, "Report")) THEN
			TaskNew("_MySpDay_LoadTask", "^""+sCalendar+"^",^""+_MySpDay_GetField(sCalendar, 0, "Category")+"^",^""+PageInfo(0)+"^"", 1);
		END
	END
END

FUNCTION _MySpDay_Initalize(STRING sCalendar, INT nYear, INT nMonth, STRING sCluster)

	ErrSet(1);

	INT nIndex;

	// Check if all animation objects are created
	IF (StrLength(_MySpDay_GetField(sCalendar, 0, "DspInfo")) = 0) THEN RETURN; END
	FOR nIndex = 1 TO 42 DO
		// Check if the metadata value is available, the default is "0" so it is not init is empty string
		IF (StrLength(_MySpDay_GetField(sCalendar, nIndex, "Select1")) = 0) THEN RETURN; END
	END

	// Initialize the special day calendar
	_MySpDay_SetField(sCalendar, 0, "IsInit", "1");
	_MySpDay_SetMonth(sCalendar, nMonth, nYear);

	TaskNew("_MySpDay_LoadTask", "^""+sCalendar+"^",^""+_MySpDay_GetField(sCalendar, 0, "Category")+"^",^""+PageInfo(0)+"^"", 1);
END

FUNCTION _MySpDay_LoadTask(STRING sCalendar, STRING sCategory, STRING sCurrPage)

	ErrSet(1);

	INT bSuccess;

	// Check if the load is already active
	IF (StrLength(_MySpDay_GetField(sCalendar, 0, "IsLoading")) > 0) THEN RETURN; END

	// Set loading to stop recall while data is loading
	_MySpDay_SetField(sCalendar, 0, "IsLoading", "1");

	// Start load task
	bSuccess = StrToInt(TaskCall("MySpDay_Load", "^""+sCalendar+"^",^""+_MySpDay_GetField(sCalendar, 0, "Category")+"^",^""+sCurrPage+"^""));

	IF (NOT bSuccess) THEN _MySpDay_SetField(sCalendar, 0, "IsInit", ""); END
	_MySpDay_SetField(sCalendar, 0, "IsLoading", "");
END

INT mn_MySpDay_ClickDate_XPos = 0;
INT mn_MySpDay_ClickDate_YPos = 0;

FUNCTION _MySpDay_ClickDate(STRING sCalendar, INT bMouseDown = FALSE)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));
	INT nSelYear = StrToInt(_MySpDay_GetField(sCalendar, 0, "SelectYear"));
	INT nAN1 = _MySpDay_GetANName("_CalVw_"+sCalendar+"_1");
	INT nAN2 = _MySpDay_GetANName("_CalVw_"+sCalendar+"_9");
	INT bIsSwipe = FALSE;
	INT nWeekday;
	INT nWeekNum;
	INT nDay;
	INT nLeft, nRight, nTop, nBottom;
	INT nMouseX, nMouseY;
	TIMESTAMP tsSelected;

	// Get mouse position and cell area
	DspGetMouse(nMouseX, nMouseY);
	DspAnGetPos(nAN1, nLeft, nTop);
	DspAnGetPos(nAN2, nRight, nBottom);

	// Process for mouse down event, save the mouse position and context area
	IF (bMouseDown) THEN
		mn_MySpDay_ClickDate_XPos = nMouseX;
		mn_MySpDay_ClickDate_YPos = nMouseY;
		RETURN;
	END
	// Check for swipe accross month
	IF (mn_MySpDay_ClickDate_XPos > 0) THEN
		IF (mn_MySpDay_ClickDate_XPos < (nMouseX - (nRight - nLeft))) THEN _MySpDay_SetMonth(sCalendar, nMonth-1, nYear); bIsSwipe = TRUE; END
		IF (mn_MySpDay_ClickDate_XPos > (nMouseX + (nRight - nLeft))) THEN _MySpDay_SetMonth(sCalendar, nMonth+1, nYear); bIsSwipe = TRUE; END
	END
	IF (mn_MySpDay_ClickDate_YPos > 0) THEN
		IF (mn_MySpDay_ClickDate_YPos < (nMouseY - (nBottom - nTop))) THEN _MySpDay_SetMonth(sCalendar, nMonth, nYear-1); bIsSwipe = TRUE; END
		IF (mn_MySpDay_ClickDate_YPos > (nMouseY + (nBottom - nTop))) THEN _MySpDay_SetMonth(sCalendar, nMonth, nYear+1); bIsSwipe = TRUE; END
	END
	IF (bIsSwipe) THEN RETURN; END

	// Adjust mouse relative to calendar cells. Adjust Y position for AN.
	nMouseX = nMouseX - nLeft;
	nMouseY = nMouseY - nTop + (nBottom - nTop);

	// Calculate the selected cell
	nWeekday = (nMouseX / (nRight - nLeft)) + 1;
	nWeekNum = (nMouseY / (nBottom - nTop)) + 1;

	// Check range of result
	IF (nWeekday < 1) THEN nWeekday = 1; END
	IF (nWeekday > 7) THEN nWeekday = 7; END
	IF (nWeekNum < 1) THEN nWeekNum = 1; END
	IF (nWeekNum > 6) THEN nWeekNum = 6; END

	// Exit if the day is not an active part of the current month
	IF (NOT _MySpDay_IsActive(sCalendar, nWeekday, nWeekNum)) THEN RETURN; END

	// Get the select offset
	IF (nSelYear = 0) THEN nSelYear = nYear; END
	nSelYear = nYear - nSelYear + 1;
	IF ((nSelYear < 1) OR (nSelYear > 3)) THEN RETURN; END

	// Mark the date as selected
	nDay = _MySpDay_GetDspDay(sCalendar, nWeekday, nWeekNum);
	tsSelected = TimestampCreate(nYear, nMonth, nDay, 0, 0, 0);
	_MySpDay_SetField(sCalendar, 0, "SelectedLabel", TimestampToStr(tsSelected, 8));
	_MySpDay_SetField(sCalendar, 0, "SelectedDate", IntToStr(nYear)+" "+IntToStr(nMonth)+" "+
													IntToStr(nDay)+" "+IntToStr(nWeekday));

	// Update the calendar display
	IF (StrToInt(_MySpDay_IsSelected(sCalendar, nWeekday, nWeekNum))) THEN
		_MySpDay_SetField(sCalendar, 0, "SelectedForDel", "1");
		_MySpDay_SetField(sCalendar, 0, "SelectedDesc", _MySpDay_GetField(sCalendar, nDay, "Label"+IntToStr(nMonth)+"_"+IntToStr(nSelYear)));
	ELSE
		_MySpDay_SetField(sCalendar, 0, "SelectedForDel", "");
		_MySpDay_SetField(sCalendar, 0, "SelectedDesc", "");
	END
END

INT mn_MySpDay_ClickMonth_XPos = 0;

FUNCTION _MySpDay_ClickMonth(STRING sCalendar, INT bMouseDown = FALSE)

	ErrSet(1);

	// Get display information: Year Month StartWeekday NumDays PrevNumDays
	STRING sDspInfo = _MySpDay_GetField(sCalendar, 0, "DspInfo");
	INT nYear = StrToInt(StrWord(sDspInfo));
	INT nMonth = StrToInt(StrWord(sDspInfo));

	INT nAN1 = _MySpDay_GetANName("_CalVw_"+sCalendar+"_51");
	INT nAN2 = _MySpDay_GetANName("_CalVw_"+sCalendar+"_58");
	INT nLeft, nRight, nTop, nBottom;
	INT nMouseX, nMouseY;
	INT nCol, nRow;

	// Get mouse position
	DspGetMouse(nMouseX, nMouseY);
	DspAnGetPos(nAN1, nLeft, nTop);
	DspAnGetPos(nAN2, nRight, nBottom);

	// Process for mouse down event
	IF (bMouseDown) THEN
		mn_MySpDay_ClickMonth_XPos = nMouseX;
		RETURN;
	END
	// Check for swipe accross month
	IF (mn_MySpDay_ClickMonth_XPos > 0) THEN
		IF (mn_MySpDay_ClickMonth_XPos < (nMouseX - (nRight - nLeft))) THEN _MySpDay_SetMonth(sCalendar, nMonth, nYear-1); RETURN; END
		IF (mn_MySpDay_ClickMonth_XPos > (nMouseX + (nRight - nLeft))) THEN _MySpDay_SetMonth(sCalendar, nMonth, nYear+1); RETURN; END
	END

	// Adjust mouse relative to calendar. Adjust Y position for AN.
	nMouseX = nMouseX - nLeft;
	nMouseY = nMouseY - nTop + (nBottom - nTop);

	// Calculate the selected cell
	nCol = (nMouseX / (nRight - nLeft)) + 1;
	nRow = (nMouseY / (nBottom - nTop)) + 1;

	// Check range of result
	IF (nCol < 1) THEN nCol = 1; END
	IF (nCol > 6) THEN nCol = 6; END
	IF (nRow < 1) THEN nRow = 1; END
	IF (nRow > 2) THEN nRow = 2; END

	// Display the selected month
	_MySpDay_SetMonth(sCalendar, nCol + ((nRow-1) * 6), nYear);
END

FUNCTION _MySpDay_ClickSelected(STRING sCalendar)

	ErrSet(1);

	STRING sCluster = _MySpDay_GetField(sCalendar, 0, "Cluster");
	STRING sCategory = _MySpDay_GetField(sCalendar, 0, "Category");
	STRING sSelected = _MySpDay_GetField(sCalendar, 0, "SelectedDate");
	STRING sLabel = _MySpDay_GetField(sCalendar, 0, "SelectedDesc");
	INT	nYear = StrToInt(StrWord(sSelected));
	INT	nMonth = StrToInt(StrWord(sSelected));
	INT	nDay = StrToInt(StrWord(sSelected));
	TIMESTAMP tsDate = TimestampCreate(nYear,nMonth,nDay,0,0,0);
	INT	bForDel = StrToInt(_MySpDay_GetField(sCalendar, 0, "SelectedForDel"));
	INT hSession;
	INT nCatID;
	INT nSchdID;

	// Reset selected and check valid data
	_MySpDay_SetField(sCalendar, 0, "SelectedDate", "");
	_MySpDay_SetField(sCalendar, 0, "SelectedForDel", "");
	IF ((nYear = 0) OR (nMonth = 0) OR (nDay = 0)) THEN RETURN; END
	IF (StrLength(sCluster) = 0) THEN sCluster = PageInfo(26); END

	// If selected, remove the selected item
	IF (bForDel) THEN
		// Find the item to delete
		hSession = SchdSpecialItemOpen("GroupName=^""+sCategory+"^";Day="+TimestampToStr(tsDate,15), "GroupName,Name,Day,ID", sCluster);
		IF (hSession = -1) THEN RETURN; END
		SchdSpecialItemFirst(hSession);
		IF (SchdSpecialItemNumRecords(hSession) = 0) THEN RETURN; END
		IF (SchdSpecialItemDelete(sCluster, StrToInt(SchdSpecialItemGetField(hSession, "ID"))) <> 0) THEN RETURN; END
		SchdSpecialItemClose(hSession);

		// Remove from calendar
		_MySpDay_DelSelected(sCalendar, tsDate);
	ELSE
		// Add the new special day
		nCatID = SchdSpecialAdd(sCluster, sCategory);
		IF (nCatID = -1) THEN RETURN; END
		nSchdID = SchdSpecialItemAdd(sCluster, nCatID, sLabel, tsDate);
		IF (nSchdID = -1) THEN RETURN; END
		// Add to calendar
		_MySpDay_AddSelected(sCalendar, tsDate, sLabel);
	END
	RETURN;
END

FUNCTION _MySpDay_SetSelectedDesc(STRING sCalendar)

	ErrSet(1);

	STRING sDesc = _MySpDay_GetField(sCalendar, 0, "SelectedDesc");

	sDesc = Input("Enter description", _MySpDay_GetField(sCalendar, 0, "SelectedLabel"), sDesc);

	IF (StrLength(sDesc) > 0) THEN
		_MySpDay_SetField(sCalendar, 0, "SelectedDesc", sDesc);
	END
END

