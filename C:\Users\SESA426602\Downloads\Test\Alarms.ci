//	FILE:		Alarms.ci
//
//
//	DESCRIPTION:	This file contains various functions that show how 
//			you can customise the way alarms behave.
//			If you want to attach Operator Comments to Alarms 
//			or change analog alarm properties by selecting them
//			from an alarm list then the following functions can 
//			be copied to your project. 
//
//	NOTES:		If you don't want the above then you don't need any 
//			of the cicode shown here.
//	

// 	---------------------		Attach Comment Functions 	------------------------
//
//	FUNCTION:	SetEventAn
//
//	DESCRIPTION:	Remembers the Animation Number selected by the 
//			operator. This function is called via the left mouse
//			button (PageWide Keyboard) when the user clicks on a
//			Alarm in the list.

INT	hEventAn;

FUNCTION
SetEventAn()
	int	hAn;

	hAn = KeyGetCursor();
	IF hAn <> -1 THEN
		hEventAn = hAn;
	END
END

//	FUNCTION:	GetEventAn
//	RETURN VALUE:	hEventAn

INT		
FUNCTION	
GetEventAn()	
	Return(hEventAn);	
END

//	FUNCTION:	AttachComment
//
//	DESCRIPTION:	Attach a comment to a alarm summary.

FUNCTION
AttachComment(int hFault)
	int	hAn;
	string	sFault;

	sFault = FaultCondition(hFault);
	IF hEventAn <> -1 THEN
		hAn = KeyGetCursor();
		KeySetCursor(hEventAn);
		AlarmComment(sFault);	
		KeySetCursor(hAn);
	END
END

//	FUNCTION:	FaultCondition
//
//	DESCRIPTION:	Get the reason for the fault. If fault is less than
//			5 get a standard fault from the array of fault 
//			messages, otherwise get the reason from the user.
//	
//	NOTE:		The @() characters define strings that can be 
//			translated at runtime.

STRING	sFaults[6] = "", "@(Electrical)", "@(Mechanical)", "@(Operational)", "@(Process)", "@(Other)";

STRING
FUNCTION
FaultCondition(int hFault)
	string	sFault;

	IF hFault < 5 THEN
		RETURN sFaults[hFault];
	ELSE
		RETURN Input("@(Alarm Comment)", "@(Enter the reason for the alarm)", "");
	END
END


//	FUNCTION:	AlarmMoveCursor
//
//	DESCRIPTION:	This function is used to move an object to indicate the Alarm
//			that is currently selected.
//	
//	REVISION	15 April 98	Steve Schilg	Modified Cursor Offset.
//
//	AN		First AN of Alarm list
//	Count		Number of Alarms in the Alarm List
//	ObjAn		Animation Number of Object to be moved
//	
//	RETURN VALUE	None.


FUNCTION
AlarmMoveCursor(INT AN,INT Count, INT ObjAn)
INT hAn,X,Y;
	
	hAn	=	KeyGetCursor();				!Get AN currently in Focus
	IF (hAn >= AN) AND (hAn <= (AN+Count)) THEN	!Check if in range
		DspAnGetPos(hAn,X,Y);				!Get XY co-ordinates of AN
		DspAnMove(ObjAn,X-9,Y+5);			!Move Object 
	END
END

//	FUNCTION:	ResetEventAn
//
//	DESCRIPTION:	Resets the hEventAn variable so that the Alarm 
//			Select Cursor does not point to the last selected An. 
//			Called on Page Entry or Exit.

FUNCTION
AlarmResetEventAn()
	hEventAn=0;
END

//	FUNCTION:	AlarmSelected
//
//	DESCRIPTION:	Checks if there is a Alarm displayed at the AN where the 
//			Alarm Select Cursor is positioned.
//	AN		First AN of Alarm list
//	Count		Number of Alarms in the Alarm List
//
//	RETURN VALUE:	TRUE if alarm selected, FALSE if no Alarm  selected


INT
FUNCTION
AlarmSelected(Int An,Int Count)
	IF StrLength(AlarmGetDsp(GetEventAn(), "Tag")) > 0 AND 
			(GetEventAn() >= An) AND (GetEventAn() <= (Count+An)) THEN
		Return(1);
	ELSE
		Return(0);
	END
END

!---------------------------- Set Analog Alarm Thresholds -------------------------

// The following Function should be called from a alarm list that shows all configured alarms.
// You need to set up an alarm page that shows all alarms but is not updated when the status of an alarm is 
// changed. To do this use a button with the command AlarmSetInfo(21,3,4)

STRING sHighHigh,sHigh,sLow,sLowLow,sDeadBand,sDeviation,sRate;
FUNCTION
AlarmSet()
INT  hAn;
STRING sTag,sName,sEnab,sDisab;
	SleepMS(250);		
	KeySetCursor(GetEventAn());	
	hAn = KeyGetCursor();
		
	sTag = AlarmGetDsp(hAN, "Tag");

	IF StrLength(sTag) > 0 THEN
		
		sName	=AlarmGetDsp(hAN, "Name");
		sHighHigh=AlarmGetDsp(hAn, "HighHigh");
		sHigh	 =AlarmGetDsp(hAn, "High");	
		sLow	 =AlarmGetDsp(hAn, "Low");
		sLowLow	 =AlarmGetDsp(hAn, "LowLow");
		sDeadBand=AlarmGetDsp(hAn, "Deadband");
		sDeviation=AlarmGetDsp(hAn, "Deviation");
		sRate	 =AlarmGetDsp(hAn, "Rate");

		FormNew("Alarm Tune",30,12,0);
		
		FormPrompt(0,0,"Tag");
		FormPrompt(11,0,": "+sTag);
		FormPrompt(0,1,"Name");
		FormPrompt(11,1,": "+sName);

		FormRadioButton(0,2,"Enable",sEnab);
		FormRadioButton(11,2,"Disable",sDisab);

		FormInput(0,3,"High High     ",sHighHigh,10);
		FormInput(0,4,"High          ",sHigh,10);
		FormInput(0,5,"Low           ",sLow,10);
		FormInput(0,6,"Low Low       ",sLowLow,10);
		FormInput(0,7,"DeadBand      ",sDeadBand,10);
		FormInput(0,8,"Deviation     ",sDeviation,10);
		FormInput(0,9,"Rate of Change",sRate,10);

		FormButton(0 ,11,"   OK   ", 0, 1);
		FormButton(12,11," Cancel ", 0, 2);

		IF FormRead(0)=0 THEN
			KeySetCursor(hAn);	

			IF AlarmGetDsp(hAN, "Tag")= sTag THEN	!Check Still pointing to same AN
				AlarmSetThreshold(0,sHighHigh);
				AlarmSetThreshold(1,sHigh);
				AlarmSetThreshold(2,sLow);
				AlarmSetThreshold(3,sLowLow);
				AlarmSetThreshold(4,sDeadBand);
				AlarmSetThreshold(5,sDeviation);
				AlarmSetThreshold(6,sRate);
			
				IF sDisab="1" THEN
					AlarmDisable(0,0);
				END
				IF sEnab="1" THEN
					AlarmEnable(0,0);
				END
			ELSE
				Message("Warning", "Alarms Changed - Please Select Alarm Again",48);
			END
		END
	END
END


//	FUNCTION:	AlarmCountByEquipment
//
//	DESCRIPTION:	Return the number of alarm counts depending on the type of alarms requested.
REAL FUNCTION AlarmCountByEquipment(STRING EquipName, INT AlarmType = 0)
STRING AlmFilter;
REAL Count;

AlmFilter = "Equipment=" + EquipName;
Count = AlarmCount(AlarmType,AlmFilter);

RETURN Count
END