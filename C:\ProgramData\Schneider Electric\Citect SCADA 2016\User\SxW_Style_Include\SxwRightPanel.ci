//------------------------------------------------------------------------------------
//	Copyright © 2015 Schneider Electric (Australia) Pty Ltd. All rights reserved.
//
// 	FILE:		SxwRightPanel.ci
//
//	SUMMARY:
//
//		Contains functions for enabling the right panel of the base template.
//
//-----------------------------------------------------------------------------

INT		nRIGHT_PANEL_MOVE_PIXELS	= 400;
		
INT		mbEquipmentTreeVisible[100];


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwRightPanel_Show
//
//	SUMMARY:
//		Displays the specified page in the right panel.
//
// PARAMETERS:
//		sPage				- The page name to display for the panel.
//
//-----------------------------------------------------------------------------

INT FUNCTION SxwPanelRight_Show(STRING sPage, STRING sWinName = "_SxwPanelRight")

	INT nAN = _LibControl_GetANName("_RightPanel");
	INT nHeight = StrToInt(PageInfo(13));
	INT nPosX, nPosY, nPanelWin;
	INT bDspNew = TRUE;

	IF (StrLength(sWinName) > 0) THEN
		nPanelWin = WinNumber(sWinName);
		// Check if the panel exists
		IF (nPanelWin > -1) THEN
			WinSelect(nPanelWin);
			// Check the panel is found and selected
			IF (WinNumber() = nPanelWin) THEN
				// Replace the panel
				PageDisplay(sPage);
				bDspNew = FALSE;
			END
		END
	END
	
	IF (bDspNew = TRUE) THEN
		DspAnGetPos(nAN, nPosX, nPosY);
		nPosX = _SxwDsp_GetAdjPos(nPosX, FALSE);
		nPosY = _SxwDsp_GetAdjPos(nPosY, TRUE);

		nPanelWin = WinNewAt(sPage, nPosX, nPosY, 1+4+8+16);
	END

	IF (nPanelWin > -1) THEN
		PageSetInt("_PanelRefHeight", nHeight);
		IF (StrLength(sWinName) > 0) THEN
			WinSetName(sWinName, nPanelWin);
		END
	END

	RETURN (nPanelWin);
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwPanelRight_DspPageParent
//
//	SUMMARY:
//		Changes the page of the main page (the parent of the panel popup).
//
// PARAMETERS:
//		sPage				- The page name to display in the main window.
//
//-----------------------------------------------------------------------------

FUNCTION SxwPanelRight_DspPageParent(STRING sPage)

	INT nParentWin = StrToInt(PageInfo(8));

	// Check if there is a parent window
	IF (nParentWin < 0) THEN RETURN; END

	// Adjust context to the parent window
	WinSelect(nParentWin);
	PageDisplay(sPage);
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwRightPanel_EquipmentTreeVisible
//
//	SUMMARY:
//		Returns a value indicating whether the equipment tree is visible.
//
//	RETURNS:
//		TRUE if the equipment tree is visible, otherwise FALSE.
//			
//-----------------------------------------------------------------------------

INT FUNCTION SxwRightPanel_EquipmentTreeVisible()

	RETURN (mbEquipmentTreeVisible[WinNumber()]);
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwRightPanel_ToggleTree
//
//	SUMMARY:
//		Swaps between displaying the equipment and menu trees in the right panel.
//
// PARAMETERS:
//		sMenuTreeID			- The ID of the menu tree control.
//		sMenuVScrollBarID	- The ID of the vertical scrollbar control of the menu tree.
//		sMenuHScrollBarID	- The ID of the horizontal scrollbar control of the menu tree.
//		sEqTreeID			- The ID of the equipment tree control.
//		sEqVScrollBarID		- The ID of the vertical scrollbar control of the equipment tree.
//		sEqHScrollBarID		- The ID of the horizontal scrollbar control of the equipment tree.
//
//-----------------------------------------------------------------------------

INT FUNCTION SxwRightPanel_ShowTree(STRING sMenuTreeID, STRING sMenuVScrollBarID, STRING sMenuHScrollBarID, STRING sEqTreeID, STRING sEqVScrollBarID, STRING sEqHScrollBarID)

	ErrSet(1);

	// Check if the controls are available
	IF (LibTree_GetPropertyInt(sMenuTreeID, "Left", -999) = -999) THEN RETURN (FALSE); END
	IF (LibScrollBar_GetPropertyInt(sMenuVScrollBarID, "Left", -999) = -999) THEN RETURN (FALSE); END
	IF (LibScrollBar_GetPropertyInt(sMenuHScrollBarID, "Left", -999) = -999) THEN RETURN (FALSE); END

	IF (LibTree_GetPropertyInt(sEqTreeID, "Left", -999) = -999) THEN RETURN (FALSE); END
	IF (LibScrollBar_GetPropertyInt(sEqVScrollBarID, "Left", -999) = -999) THEN RETURN (FALSE); END
	IF (LibScrollBar_GetPropertyInt(sEqHScrollBarID, "Left", -999) = -999) THEN RETURN (FALSE); END

	// Update the position
	IF (mbEquipmentTreeVisible[WinNumber()]) THEN
		LibTree_SetPropertyInt(sMenuTreeID, "MoveHorz", nRIGHT_PANEL_MOVE_PIXELS);
		LibScrollBar_SetPropertyInt(sMenuVScrollBarID, "HiddenWhen", TRUE);
		LibScrollBar_SetPropertyInt(sMenuHScrollBarID, "HiddenWhen", TRUE);

		LibTree_SetPropertyInt(sEqTreeID, "MoveHorz", 0);
		LibScrollBar_SetPropertyInt(sEqVScrollBarID, "HiddenWhen", FALSE);
		LibScrollBar_SetPropertyInt(sEqHScrollBarID, "HiddenWhen", FALSE);
	ELSE
		LibTree_SetPropertyInt(sEqTreeID, "MoveHorz", nRIGHT_PANEL_MOVE_PIXELS);
		LibScrollBar_SetPropertyInt(sEqVScrollBarID, "HiddenWhen", TRUE);
		LibScrollBar_SetPropertyInt(sEqHScrollBarID, "HiddenWhen", TRUE);

		LibTree_SetPropertyInt(sMenuTreeID, "MoveHorz", 0);
		LibScrollBar_SetPropertyInt(sMenuVScrollBarID, "HiddenWhen", FALSE);
		LibScrollBar_SetPropertyInt(sMenuHScrollBarID, "HiddenWhen", FALSE);
	END

	RETURN (TRUE);
END


FUNCTION SxwRightPanel_ToggleTree(STRING sMenuTreeID, STRING sMenuVScrollBarID, STRING sMenuHScrollBarID, STRING sEqTreeID, STRING sEqVScrollBarID, STRING sEqHScrollBarID)

	mbEquipmentTreeVisible[WinNumber()] = NOT mbEquipmentTreeVisible[WinNumber()];
	
	SxwRightPanel_ShowTree(sMenuTreeID, sMenuVScrollBarID, sMenuHScrollBarID, sEqTreeID, sEqVScrollBarID, sEqHScrollBarID);
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	_SxwRightPanel_Position
//
//	SUMMARY:
//		Maintains the popup page in the position of the right panel.
//		Called from the right panel template.
//
//-----------------------------------------------------------------------------

FUNCTION _SxwPanelRight_Position(INT pxWidth, INT pxHeight, INT pxXOffset = 0, INT pxYOffset = 0)

	INT nPanelWin = WinNumber();
	INT nParentWin = StrToInt(PageInfo(8));
	INT nAN, nPosX, nPosY;
	INT nRefHeight = PageGetInt("_PanelRefHeight");
	INT nParentHeight, nHeight;
	INT nWidth = -1;

	// Check if there is a parent window
	IF (nParentWin < 0) THEN RETURN; END

	// Adjust context to the parent window
	WinSelect(nParentWin);
	nAN = _LibControl_GetANName("_RightPanel");
	IF (nAN <= 0) THEN RETURN; END

	DspAnGetPos(nAN, nPosX, nPosY);
	IF (pxXOffset <> 0) THEN nPosX = nPosX + pxXOffset; END
	IF (pxYOffset <> 0) THEN nPosY = nPosY + pxYOffset; END
	nPosX = _SxwDsp_GetAdjPos(nPosX, FALSE);
	nPosY = _SxwDsp_GetAdjPos(nPosY, TRUE);

	// Check if the parent height has changed
	nParentHeight = StrToInt(PageInfo(13));
	IF ((nParentHeight <> nRefHeight) AND (nRefHeight > 0)) THEN
		nWidth = _SxwDsp_GetAdjSize(pxWidth, FALSE);
		nHeight = _SxwDsp_GetAdjSize(pxHeight, TRUE);
	END

	// Adjust context back to the panel
	WinSelect(nPanelWin);
	IF (WinNumber() <> nPanelWin) THEN RETURN; END

	// Reposition the panel
	WinPos(nPosX, nPosY);
	// Check if the parent height has changed
	IF (nWidth > 0) THEN
		PageSetInt("_PanelRefHeight", nParentHeight);
		WinSize(nWidth, nHeight, 0);
	END
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	_SxwRightPanel_PageListInit
//
//	SUMMARY:
//		Builds the menu to display the page list.
//
//-----------------------------------------------------------------------------

INT mdtPageRDBTimeStamp = 0;

INT FUNCTION _SxwPanelRight_PageListInit(STRING sMenu)

	ErrSet(1);

	INT hNode = MenuGetPageNode(sMenu, FALSE);
	INT hPages = -1;
	INT hFile, dtTimeStamp;
	STRING sPage, sName, sIcon;

	// Check if menu exists and needs to be reloaded
	hFile = FileOpen("[run]:_pages.rdb", "r");
	IF (hFile <> -1) THEN
		dtTimeStamp = FileGetTime(hFile);
		FileClose(hFile);

		IF ((hNode <> -1) AND (mdtPageRDBTimeStamp <> dtTimeStamp)) THEN
			MenuNodeRemove(hNode);
		END

		mdtPageRDBTimeStamp = dtTimeStamp;
	END

	// Get the menu node
	hNode = MenuGetPageNode(sMenu, TRUE);

	// Check if the page menu needs to be built
	IF ((hNode > -1) AND (MenuGetFirstChild(hNode) < 0)) THEN

		hNode = MenuNodeAddChild(hNode, "@"+"("+"Pages)", "", "", "icons_16x16.ctexplor");

		// Populate pages from pages.rdb
		hPages = RdbOpen("_pages");
		IF (hPages > -1) THEN
			RdbFirstRec(hPages);
			WHILE (NOT RdbEOF(hPages)) DO
				sName = RdbGet(hPages, "Name");
				sPage = StrLower(sName);
				sIcon = "icons_16x16.page";
				// Check if system page
				IF ((StrLeft(sPage, 1) <> "!") AND (sPage <> "pagemenu") AND (sPage <> "tab_style_startup")) THEN
					IF (StrSearch(0, sPage, "start") > -1) THEN sIcon = "icons_16x16.ctruntime"; END
					IF (StrSearch(0, sPage, "sys") > -1) THEN sIcon = "icons_16x16.alarm_hw"; END
					IF (StrSearch(0, sPage, "main") > -1) THEN sIcon = "icons_16x16.ctruntime"; END
					IF (StrSearch(0, sPage, "tag") > -1) THEN sIcon = "icons_16x16.tag"; END
					IF (StrSearch(0, sPage, "control") > -1) THEN sIcon = "icons_16x16.controller"; END
					IF (StrSearch(0, sPage, "inhibit") > -1) THEN sIcon = "icons_16x16.controller"; END
					IF (StrSearch(0, sPage, "manual") > -1) THEN sIcon = "icons_16x16.ctsetup"; END
					IF (StrSearch(0, sPage, "setup") > -1) THEN sIcon = "icons_16x16.ctsetup"; END
					IF (StrSearch(0, sPage, "overv") > -1) THEN sIcon = "icons_16x16.ctexplor"; END
					IF (StrSearch(0, sPage, "alarm") > -1) THEN sIcon = "icons_16x16.alarm_act"; END
					IF (StrSearch(0, sPage, "alm") > -1) THEN sIcon = "icons_16x16.alarm_act"; END
					IF (StrSearch(0, sPage, "disabled") > -1) THEN sIcon = "icons_16x16.alarm_dis"; END
					IF (StrSearch(0, sPage, "hardware") > -1) THEN sIcon = "icons_16x16.alarm_hw"; END
					IF (StrSearch(0, sPage, "soe") > -1) THEN sIcon = "icons_16x16.alarm_act"; END
					IF (StrSearch(0, sPage, "trend") > -1) THEN sIcon = "icons_16x16.trend"; END
					IF (StrSearch(0, sPage, "trn") > -1) THEN sIcon = "icons_16x16.trend"; END
					IF (StrSearch(0, sPage, "anal") > -1) THEN sIcon = "icons_16x16.trend_pa"; END
					IF (StrSearch(0, sPage, "spc") > -1) THEN sIcon = "icons_16x16.trend_spc"; END
					IF (StrSearch(0, sPage, "maint") > -1) THEN sIcon = "icons_16x16.maint"; END
					IF (StrSearch(0, sPage, "help") > -1) THEN sIcon = "icons_16x16.help"; END
					IF (StrSearch(0, sPage, "info") > -1) THEN sIcon = "icons_16x16.info"; END
					IF (StrSearch(0, sPage, "network") > -1) THEN sIcon = "icons_16x16.network"; END
					IF (StrSearch(0, sPage, "find") > -1) THEN sIcon = "icons_16x16.magnifier"; END
					IF (StrSearch(0, sPage, "filter") > -1) THEN sIcon = "icons_16x16.filter"; END
					IF (StrSearch(0, sPage, "report") > -1) THEN sIcon = "icons_16x16.file"; END
					IF (StrSearch(0, sPage, "user") > -1) THEN sIcon = "icons_16x16.users"; END
					IF (StrSearch(0, sPage, "login") > -1) THEN sIcon = "icons_16x16.login"; END
					MenuNodeAddChild(hNode, sName, "SxwPanelRight_DspPageParent", "^""+sPage+"^"", sIcon);
				END
				RdbNextRec(hPages);
			END
			RdbClose(hPages);
		END
	END

	RETURN (TRUE);
END


INT FUNCTION _SxwDsp_GetAdjPos(INT nPosition, INT bIsHeight)

	REAL rScale = StrToReal(PageInfo(16+bIsHeight));
	REAL rPos = nPosition;

	rPos = rPos * rScale;
	RETURN (rPos + StrToReal(PageInfo(28+bIsHeight)));
END

INT FUNCTION _SxwDsp_GetAdjSize(INT nSize, INT bIsHeight)

	REAL rScale = StrToReal(PageInfo(16+bIsHeight));
	REAL rSize = nSize;

	rSize = rSize * rScale;
	RETURN (rSize);
END
