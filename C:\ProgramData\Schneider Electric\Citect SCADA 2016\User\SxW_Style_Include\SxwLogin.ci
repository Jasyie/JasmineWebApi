//--------------------------------------------------------------------------------
//	Copyright © 2015 Schneider Electric (Australia) Pty Ltd. All rights reserved.
//
// 	FILE:		SxwLogin.ci
//
//	SUMMARY:
//
//		Contains functions for displaying the login menu.
//
//	REMARKS
//
//		When equivalent functions are also used on the CSV_Include templates, the new
//		functions try to maintain configuration compatibility by: 
//			* reading the equivalent Citect.ini parameters in the [Page] section
//			  (instead of [Navigation] used in the CSV_Include project)
//			* reading the same page environment variables
//		and execute the retrieved commands in equivalent fashion as CSV_Include project does.
//
//-----------------------------------------------------------------------------

INT		MAX_CUSTOM_MENUS		= 10;	// The maximum number of custom menus allowed for in a user defined login menu
INT		MAX_CUSTOM_MENU_ITEMS	= 20;	// The maximum number of custom menu items allowed for in a user defined login menu

STRING	msDisplayName			= "";	// The currently logged in user name
STRING	msDisplayNameTruncated	= "";	// The currently logged in user name truncated to fit in the display
INT		mnPrivilegeUserEdit		= -1;	// The value of parameter [Privilege] UserEdit
INT		mnPopupMenuNumber		= 0;	// A counter for the number of popup menus created from a custom login menu
INT		mhCustomMenus[10][20];			// A place to cache menu handles when a user defined login menu is created


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwLogin_GetUserNameDisplay
//
//	SUMMARY:
//		Returns the user name to display.  The user name is truncated if
//		necessary and the full name added as a tool tip.
//
// PARAMETERS:
//		nAN - The anumation number of the text object displaying the user name.
//
//	RETURNS:
//		The user name to display.
//			
//-----------------------------------------------------------------------------

STRING FUNCTION SxwLogin_GetUserNameDisplay(INT nAN)
	
	STRING sDisplayName = SxwLogin_GetDisplayName();
	IF sDisplayName <> msDisplayName THEN
		msDisplayName = sDisplayName;
				
		msDisplayNameTruncated = StrTruncFontHnd(sDisplayName, DspFont("Arial", -8, BLACK, TRANSPARENT), 111, 1);
		IF sDisplayName <> msDisplayNameTruncated THEN
			DspSetTip(nAN, sDisplayName);
		ELSE			
			DspSetTip(nAN, "");
		END
	END
	
	RETURN msDisplayNameTruncated;
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwLogin_GetDisplayName
//
//	SUMMARY:
//		Returns the user full name, or the login name if the full name is empty.
//
//	RETURNS:
//		The user name to display.
//			
//-----------------------------------------------------------------------------

STRING FUNCTION SxwLogin_GetDisplayName()

	STRING sFullName = UserInfo(2);
	
	IF sFullName = "" THEN
		RETURN UserInfo(1);
	END

	RETURN sFullName;
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwLogin_LoginButtonMovement
//
//	SUMMARY:
//		Returns the number of pixels the login menu button should move to the right.
//
//	RETURNS:
//		The number of pixels the login menu button should move to the right.
//			
//-----------------------------------------------------------------------------

INT FUNCTION SxwLogin_LoginButtonMovement()

	RETURN SxwLastAlarm_Expanded() * 48;
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	SxwLogin_DspMenu
//
//	SUMMARY:
//		Displays the "Login" menu defined for the "Template" page if it exists
//		in the menu configuration table, otherwise the default StruxureWare
//		login menu.
//			
//-----------------------------------------------------------------------------

FUNCTION SxwLogin_DspMenu()

	INT nAN;
	INT nXPos	= -1;
	INT nYPos	= -1;
	INT hMenu;
	
	nAN = KeyGetCursor();
	IF nAN > 0 THEN
		nXPos = DspGetAnLeft(nAN);
		nYPos = DspGetAnBottom(nAN) + 1;
	END

	hMenu = _SxwLogin_GetMenuHnd();
	IF hMenu = -1 THEN
		// Display the default login menu if there is none defined in the menu configuration table.
		_SxwLogin_DspDefaultMenu(nXPos, nYPos);
	ELSE
		_SxwLogin_DspCustomMenu(hMenu, nXPos, nYPos);
	END
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	_SxwLogin_GetMenuHnd
//
//	SUMMARY:
//		Returns the handle for the login menu defined (at level 1) for the
//		template page.
//			
//	RETURNS: 
//		The handle for the login menu defined (at level 1) for the template
//		page, OR -1 IF the menu IS NOT defined OR empty.
//
//-----------------------------------------------------------------------------

INT FUNCTION _SxwLogin_GetMenuHnd()

	INT hMenu;
	INT hFoundMenu = -1;
	
	hMenu = MenuGetPageNode("Template");
	IF hMenu < 0 THEN
		RETURN -1;
	END
	
	hMenu = MenuGetFirstChild(hMenu);
	WHILE hMenu > -1 AND hFoundMenu < 0 DO
		IF MenuNodeGetProperty(hMenu, 0) = "Login" THEN
			hFoundMenu = hMenu;
		END
		hMenu = MenuGetNextChild(hMenu);
	END
	
	IF hFoundMenu > -1 AND MenuGetFirstChild(hFoundMenu) < 0 THEN
		hFoundMenu = -1;
	END
	
	RETURN hFoundMenu;
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	_SxwLogin_DspDefaultMenu
//
//	SUMMARY:
//		Displays the default StruxureWare login menu.
//
//	PARAMETERS:
//		nXPos - The x position of menu. Set to -1 to show menu at mouse cursor position.
//		nYPos - The y position of menu. Set to -1 to show menu at mouse cursor position.
//	
//-----------------------------------------------------------------------------

FUNCTION _SxwLogin_DspDefaultMenu(INT nXPos = -1, INT nYPos = -1)

	INT		nSelectedItem			= 0;
	STRING	sLogOutDisable			= "";
	STRING	sChangePasswordDisable	= "";
	INT		bUserNameInMenu			= FALSE;

	IF mnPrivilegeUserEdit = -1 THEN
		mnPrivilegeUserEdit = StrToInt(ParameterGet("Privilege", "EditUser", 8));
	END	
		
	IF (UserInfo(6) <> "1") THEN
		sLogOutDisable = "!";
		sChangePasswordDisable = "!";
	ELSE
		IF SxwLastAlarm_Expanded() THEN
			// If an expanded last alarm display hides the user name, add it to the top of the login menu.
			DspPopupMenu(0, "!" + StrToLocalText(SxwLogin_GetDisplayName()));
			DspPopupMenu(0, ",");
			bUserNameInMenu = TRUE;
		END
	END

	IF NOT (GetPriv(mnPrivilegeUserEdit, 0)) THEN
		sChangePasswordDisable = "!";
	END

	DspPopupMenu(0, StrToLocalText("@(Login)"));
	DspPopupMenu(0, sLogOutDisable + StrToLocalText("@(Logout)"));
	DspPopupMenu(0, sChangePasswordDisable + StrToLocalText("@(Change Password)"));
	DspPopupMenu(0, ",");
	DspPopupMenu(0, StrToLocalText("@(Print)"));
	
	nSelectedItem = DspPopupMenu(-1, "", nXPos, nYPos);
	
	IF bUserNameInMenu THEN
		nSelectedItem = nSelectedItem - 1;
	END
	
	SELECT CASE nSelectedItem
	CASE 1
		LoginForm();
	CASE 2
		Logout();
	CASE 3
		UserPasswordForm();
	CASE 4
		PagePrint();
	END SELECT
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	_SxwLogin_DspCustomMenu
//
//	SUMMARY:
//		Displays the menu that is defined by the specified menu handle.  If a
//		user is logged in and the last alarm display is expanded, the user name
//		is added to the top line of the root popup menu.
//
//	PARAMETERS:
//		hMenu - The handle of the menu.
//		nXPos - The x position of menu. Set to -1 to show menu at mouse cursor position.
//		nYPos - The y position of menu. Set to -1 to show menu at mouse cursor position.
//			
//-----------------------------------------------------------------------------

FUNCTION _SxwLogin_DspCustomMenu(INT hMenu, INT nXPos = -1, INT nYPos = -1)

	INT	bUserNameInMenu;
	INT	nSelection;
	INT	nSelectedItem;
	INT	nSelectedMenu;
			
	bUserNameInMenu = UserInfo(6) = "1" AND SxwLastAlarm_Expanded();
	IF bUserNameInMenu THEN
		DspPopupMenu(0, "!" + StrToLocalText(SxwLogin_GetDisplayName()));
		DspPopupMenu(0, ",");
	END

	mnPopupMenuNumber = 0;
	_SxwLogin_CreateCustomMenu(hMenu);
	
	nSelection = DspPopupMenu(-1, "", nXPos, nYPos);
	
	IF (nSelection > 0) THEN
		nSelectedMenu = nSelection / 100;
		nSelectedItem = nSelection MOD 100;
		IF nSelectedMenu = 0 AND bUserNameInMenu THEN
			nSelectedItem = nSelectedItem - 1;
		END
	
		MenuNodeRunCommand(mhCustomMenus[nSelectedMenu][nSelectedItem]);
	END
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:	_SxwLogin_CreateCustomMenu
//
//	SUMMARY:
//		Creates a popup menu using the specified menu handle.  This function is recursive.
//
//	PARAMETERS:
//		hMenu		- The handle of the menu.
//
//-----------------------------------------------------------------------------

FUNCTION _SxwLogin_CreateCustomMenu(INT hMenu)

	INT		nMenuItemNumber		= 1;
	INT		hChildMenu;
	STRING	sMenuName;
	INT		nMenuPriv;
	INT		nMenuArea;
	INT		nMenuChecked;
	STRING	sMenuItem;
	INT		nCurrentMenuNumber	= mnPopupMenuNumber ;
	
	mnPopupMenuNumber = mnPopupMenuNumber + 1;
	
	hChildMenu = MenuGetFirstChild(hMenu);
	WHILE hChildMenu > -1 AND nMenuItemNumber < MAX_CUSTOM_MENU_ITEMS DO	
		IF NOT MenuNodeIsHidden(hChildMenu) THEN
			sMenuName = MenuNodeGetProperty(hChildMenu, 0);
			nMenuPriv = MenuNodeGetProperty(hChildMenu, 2);
			nMenuArea = MenuNodeGetProperty(hChildMenu, 3);
			nMenuChecked = MenuNodeGetProperty(hChildMenu, 5);
			sMenuItem = "";
			
			IF MenuNodeIsDisabled(hChildMenu) OR NOT GetPriv(nMenuPriv, nMenuArea) THEN
				sMenuItem = sMenuItem + "!";
			END
			
			IF nMenuChecked THEN
				sMenuItem = sMenuItem + "~";
			END
			
			sMenuItem = sMenuItem + StrToLocalText(sMenuName);
			
			IF MenuGetFirstChild(hChildMenu) > -1 AND mnPopupMenuNumber < MAX_CUSTOM_MENUS THEN
				sMenuItem = sMenuItem + ">" + IntToStr(mnPopupMenuNumber);
				_SxwLogin_CreateCustomMenu(hChildMenu);
			ELSE
				mhCustomMenus[nCurrentMenuNumber][nMenuItemNumber] = hChildMenu;
				nMenuItemNumber = nMenuItemNumber + 1;
			END
			
			DspPopupMenu(nCurrentMenuNumber, sMenuItem);
		END
		
		hChildMenu = MenuGetNextChild(hChildMenu);
	END
END

