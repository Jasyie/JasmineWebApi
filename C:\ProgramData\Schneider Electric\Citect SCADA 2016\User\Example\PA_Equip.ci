STRING PA_Equip_ID = "PA_Equip"
STRING sAlarmPaneName = "Alarm Pane"
STRING sTrendPaneName = "Trend Pane"
STRING sSelectedEquipment;
INT ISaveButtonAdded = 0;

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_ConfigureTrends
//
//	SUMMARY:
//		Checks if a PAV file exists for a piece of equipment,
//		and if it does it loads it, otherwise
//		we find all alarms and trends for that piece of equipment
//		and add it to the process analyst
//
//		this function also removed the default open and save buttons
//		and adds a custom save button that saves the .PAV
//		for the equipment view.		
//			
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------

INT FUNCTION PAEquip_ConfigureTrends(STRING sFilter, STRING equipment = "", INT isParent = FALSE, STRING eqTreeID = "", STRING paEquipID = "EquipPA")
	STRING equipField = "Equipment";
	STRING cluster = "";
	INT iError;
	STRING sPavFile;
	
	PA_Equip_ID = paEquipID;
	
	
	sPavFile = PAEquip_GetPavFile(equipment);
	
	sSelectedEquipment = equipment;
	
	IF sPavFile <> "" THEN
		ProcessAnalystLoadFile(sPavFile,0,0,PA_Equip_ID);
		PAEquip_AddSaveButton();
		PAEquip_RemoveSaveOpenButtons("Citect_Command_LoadConfig")
		PAEquip_RemoveSaveOpenButtons("Citect_Command_SaveConfig")
		
	ELSE

		IF (("" <> equipment) AND (FALSE = isParent)) THEN
			IF (0 <> PAEquip_CountAlarmsTrends(equipment)) THEN
				PAEquip_AddSaveButton();
				PAEquip_RemoveSaveOpenButtons("Citect_Command_LoadConfig")
				PAEquip_RemoveSaveOpenButtons("Citect_Command_SaveConfig")
				PAEquip_ClearPens()
				PAEquip_AddPane("Equipment Pane")
				PAEquip_SetTrendPens(equipment);
				PAEquip_SetAlarmPens(equipment);
			ELSE
				Prompt("@(No alarms and trends found for) "+equipment);
			END
		END
		
	END
	RETURN 0;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_ClearPens
//
//	SUMMARY:
//		Removes all pens from the process analyst. 		
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
INT FUNCTION PAEquip_ClearPens()

	OBJECT hPens;
	OBJECT hProcessAnalyst = ObjectByName(PA_Equip_ID);	
	OBJECT panes;		
	
	panes = _ObjectGetProperty(hProcessAnalyst, "Panes");
	
	_ObjectCallMethod(panes, "RemoveAll");

	RETURN 0;
END
//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_SetTrendPens
//
//	SUMMARY:
//		Find all trends for a piece of equipment and adds them to the
//		process analyst.		
//			
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
INT
FUNCTION PAEquip_SetTrendPens(STRING sEquipment)

		INT iHandle, iNumRec, iCount, iError;
		STRING sTrnName;
		
		//Add all trends, alarms and tags for each piece of equipment t
		
		iHandle = TrnBrowseOpen("EQUIPMENT="+sEquipment,"NAME,EQUIPMENT");	

		iNumRec = TrnBrowseNumRecords(iHandle)
		
		IF iNumRec > 0 THEN
			
			TrnBrowseFirst(iHandle);
			
			FOR iCount = 1 TO iNumRec DO
				sTrnName = TrnBrowseGetField(iHandle,"NAME")
	
				iError = ProcessAnalystSetPen(-1,sTrnName,PA_Equip_ID,0)
				iError = IsError()
	
				TrnBrowseNext(iHandle);
	
		    END		
	    END
	    TrnBrowseClose(iHandle)
		
	    RETURN 0;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_CountAlarmsTrends
//
//	SUMMARY:
//		Find all trends for a piece of equipment and adds them to the
//		process analyst.		
//			
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
INT
FUNCTION PAEquip_CountAlarmsTrends(STRING sEquipment)

		INT iHandle, iNumTrnRec, iNumAlmRec, iCount, iError;
		STRING sTrnName;
		iNumTrnRec = 0;
		iNumAlmRec = 0;
		
		//Add all trends, alarms and tags for each piece of equipment t
		
		iHandle = TrnBrowseOpen("EQUIPMENT="+sEquipment,"NAME,EQUIPMENT");	

		iNumTrnRec= TrnBrowseNumRecords(iHandle)
		
		TrnBrowseClose(iHandle)
		
		iHandle = AlmBrowseOpen("EQUIPMENT="+sEquipment,"TAG,EQUIPMENT");	

		iNumAlmRec = AlmBrowseNumRecords(iHandle)
		
		AlmBrowseClose(iHandle);
		
	    RETURN iNumAlmRec +iNumTrnRec;
END



//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_AddPane
//
//	SUMMARY:
//		Adds a pane to the process analyst.
//					
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
INT
FUNCTION PAEquip_AddPane(STRING sPaneName)

	OBJECT hPens;
	OBJECT hProcessAnalyst = ObjectByName(PA_Equip_ID);	
	OBJECT panes;	
	OBJECT pane;
	
	panes = _ObjectGetProperty(hProcessAnalyst, "Panes");
	
	pane = _ObjectCallMethod(panes,"Create", sPaneName);
	

	RETURN 0;

END
//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_SetAlarmPens
//
//	SUMMARY:
//		Finds all alarms for a piece of equipment and adds them
//		to the process analyst.
//
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
INT
FUNCTION PAEquip_SetAlarmPens(STRING sEquipment)

		INT iHandle, iNumRec, iCount, iError;
		STRING sAlmTag;
		
		
		//Add all trends, alarms and tags for each piece of equipment t
		
		iHandle = AlmBrowseOpen("EQUIPMENT="+sEquipment,"TAG,EQUIPMENT");	

		iNumRec = AlmBrowseNumRecords(iHandle)
		
		IF iNumRec > 0 THEN
			AlmBrowseFirst(iHandle);
			
			FOR iCount = 1 TO iNumRec DO
				sAlmTag = AlmBrowseGetField(iHandle,"TAG")
		
				iError = ProcessAnalystSetPen(-1,sAlmTag,PA_Equip_ID,0,2)
				iError = IsError()
		
				AlmBrowseNext(iHandle);
		
		    END
		   END		
	    AlmBrowseClose(iHandle)

	    RETURN 0;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_GetPavFile
//
//	SUMMARY:
//		checks if a PAV file exists for a piece of equipment.			
//		
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
STRING
FUNCTION PAEquip_GetPavFile(STRING sEquipment)

	STRING sPavFile;
		
	sPavFile = PathToStr("[RUN]:\Analyst Views\Equip."+sEquipment+".pav");
	
	
	IF FileExist(sPavFile) THEN
		RETURN sPavFile;
	ELSE
		RETURN "";
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_AddSaveButton
//
//	SUMMARY:
//		Adds a custom save button to the process analyst.			
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
FUNCTION PAEquip_AddSaveButton()

	OBJECT hPens;
	OBJECT hProcessAnalyst = ObjectByName(PA_Equip_ID);	
	OBJECT hToolbars;	
	OBJECT pane;
	INT nCount;
	OBJECT hToolbar;
	OBJECT hButtons;
	OBJECT hCurrentButton;
	INT nButtonCount;
	INT nCurrentButton;
	OBJECT hSaveButton;
	OBJECT hLoadbutton;
	STRING sLoadCommand;
	STRING sCommandId;
	OBJECT hSaveCommand;
	STRING sSaveCommandId;
	STRING sTooltip = "Save Equipment View";
	INT ISaveButtonFound = 0;
	OBJECT hCommandSystem = _ObjectGetProperty(hProcessAnalyst, "CommandSystem");
	STRING saveIcon = PathToStr("[USER]:\Example\Save.ico")
	
	hToolbars = _ObjectGetProperty(hProcessAnalyst, "Toolbars");
	
	nCount = _ObjectGetProperty(hToolbars, "Count");
	DebugMsgSet(1);
	
	IF nCount > 0 THEN
		hToolbar = _ObjectCallMethod(hToolbars, "get_Item", 1);
		hButtons = _OBJECTGetProperty(hToolbar,"Buttons");
		nButtonCount = _OBJECTgetproperty(hButtons,"Count");
		
		FOR nCurrentButton= 1 TO nButtonCount DO
			hCurrentButton = _OBJECTcallMethod(hButtons ,"get_Item",nCurrentButton);
			sCommandId = _ObjectGetProperty(hCurrentButton , "CommandId");
			IF sCommandId = "Save_Equipment_PAV" THEN
				
				ISaveButtonFound = 1;
			END
		END

		IF ISaveButtonFound = 0 THEN
		//Add the save button back in
			hSaveCommand= _ObjectCallMethod(hCommandSystem, "Create", "Save_Equipment_PAV", 0, "Save Equipment Settings", saveIcon, 0);
			sSaveCommandId	= _ObjectGetProperty(hSaveCommand, "CommandId");
			DebugMsg("PAEquip_AddSaveButton: hSaveCommand: "+hSaveCommand:#+" CommandId: "+sSaveCommandId)
			sTooltip =  _ObjectGetProperty(hSaveCommand, "Tooltip");
			DebugMsg("PAEquip_AddSaveButton: sTooltip : "+sTooltip )

			_ObjectCallMethod(hButtons, "Add", sSaveCommandId);
			
		END
		
	END
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		PAEquip_RemoveSaveOpenButtons
//
//	SUMMARY:
//		removes the default open and save button from the process analyst
//			
//	RETURNS: 
//		
//-----------------------------------------------------------------------------
FUNCTION PAEquip_RemoveSaveOpenButtons(STRING sCommand)

	OBJECT hProcessAnalyst = ObjectByName(PA_Equip_ID);	
	OBJECT hToolbars;	
	INT nCount;
	OBJECT hToolbar;
	OBJECT hButtons;
	OBJECT hCurrentButton;
	INT nButtonCount;
	INT nCurrentButton;
	OBJECT hSaveButton;
	OBJECT hLoadbutton;
	STRING sCurrentCommand;
	INT iRemoveId = -1;
	OBJECT hCommandSystem = _ObjectGetProperty(hProcessAnalyst, "CommandSystem");
	
	hToolbars = _ObjectGetProperty(hProcessAnalyst, "Toolbars");
	hToolbar = _ObjectCallMethod(hToolbars, "get_Item", 1);
	hButtons = _OBJECTGetProperty(hToolbar,"Buttons");
	nButtonCount = _OBJECTGetProperty(hButtons,"Count");
	FOR nCurrentButton = 1 TO nButtonCount DO
		hCurrentButton = _OBJECTcallmethod(hButtons,"get_Item",nCurrentButton)
		sCurrentCommand = _OBJECTgetproperty(hCurrentButton ,"CommandId");
		IF (sCurrentCommand =sCommand) THEN
			iRemoveId = nCurrentButton;
		END
	END
	IF iRemoveId <> -1 THEN
		_OBJECTcallMethod(hButtons,"Remove",iRemoveId );
	END
	
	
END
//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		EquipPA_AN601_CommandExecuted
//
//	SUMMARY:
//		SAves the process analyst view when the save button is pressed.		
//			
//	RETURNS: 
//		0 if successful or error number if failed
//
//-----------------------------------------------------------------------------
FUNCTION 
EquipPA_AN601_CommandExecuted(OBJECT processAnalyst, STRING sCommandId)

	STRING sFile = "Equip."+sSelectedEquipment+".pav";
		
	IF sCommandId= "Save_Equipment_PAV" THEN
		_ObjectCallMethod(processAnalyst, "SaveToFile",sFile, 0);
	END
		
END

	



