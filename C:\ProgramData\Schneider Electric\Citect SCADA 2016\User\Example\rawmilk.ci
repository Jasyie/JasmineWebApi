FUNCTION StartRawMilk()

	INT hRecipe;
	INT hQue;

	hRecipe = QueOpen("Recipe_Mixer",0);
	IF hRecipe <> - 1 THEN
		hRecipe = QueClose(hQue);
	END
	hRecipe = QueOpen("Recipe_Mixer",1);


	QueWrite(hRecipe, 1, "StrawSkim");
	
		hQue = QueOpen("StrawSkim",0);
		IF hQue <> - 1 THEN
			hQue = QueClose(hQue);
		END
		hQue = QueOpen("StrawSkim",1);
		QueWrite(hQue, 0, "Mixer_RecipeFullMilk");
		QueWrite(hQue, 1000, "Mixer_RecipeSkimMilk");
		QueWrite(hQue, 30, "Mixer_RecipeSugar");
		QueWrite(hQue, 0, "Mixer_RecipeMalt");
		QueWrite(hQue, 0, "Mixer_RecipeChoc");
		QueWrite(hQue, 50, "Mixer_RecipeStraw");
		QueWrite(hQue, 5, "Mixer_RecipePreMixTime");
		QueWrite(hQue, 25, "Mixer_RecipeMixTime");
		QueWrite(hQue, 7, "Mixer_RecipeMixSpeed");

	QueWrite(hRecipe, 1, "ChocSkim");
	
		hQue = QueOpen("ChocSkim",0);
		IF hQue <> - 1 THEN
			hQue = QueClose(hQue);
		END
		hQue = QueOpen("ChocSkim",1);
		QueWrite(hQue, 0, "Mixer_RecipeFullMilk");
		QueWrite(hQue, 1000, "Mixer_RecipeSkimMilk");
		QueWrite(hQue, 20, "Mixer_RecipeSugar");
		QueWrite(hQue, 0, "Mixer_RecipeMalt");
		QueWrite(hQue, 50, "Mixer_RecipeChoc");
		QueWrite(hQue, 0, "Mixer_RecipeStraw");
		QueWrite(hQue, 5, "Mixer_RecipePreMixTime");
		QueWrite(hQue, 25, "Mixer_RecipeMixTime");
		QueWrite(hQue, 7, "Mixer_RecipeMixSpeed");

	QueWrite(hRecipe, 1, "StrawMilk")
	
		hQue = QueOpen("StrawMilk",0);
		IF hQue <> - 1 THEN
			hQue = QueClose(hQue);
		END
		hQue = QueOpen("StrawMilk",1);
		QueWrite(hQue, 1000, "Mixer_RecipeFullMilk");
		QueWrite(hQue, 0, "Mixer_RecipeSkimMilk");
		QueWrite(hQue, 40, "Mixer_RecipeSugar");
		QueWrite(hQue, 0, "Mixer_RecipeMalt");
		QueWrite(hQue, 0, "Mixer_RecipeChoc");
		QueWrite(hQue, 50, "Mixer_RecipeStraw");
		QueWrite(hQue, 7, "Mixer_RecipePreMixTime");
		QueWrite(hQue, 30, "Mixer_RecipeMixTime");
		QueWrite(hQue, 8, "Mixer_RecipeMixSpeed");

	QueWrite(hRecipe, 1, "ChocMilk")
	
		hQue = QueOpen("ChocMilk",0);
		IF hQue <> - 1 THEN
			hQue = QueClose(hQue);
		END
		hQue = QueOpen("ChocMilk",1);
		QueWrite(hQue, 1000, "Mixer_RecipeFullMilk");
		QueWrite(hQue, 0, "Mixer_RecipeSkimMilk");
		QueWrite(hQue, 30, "Mixer_RecipeSugar");
		QueWrite(hQue, 0, "Mixer_RecipeMalt");
		QueWrite(hQue, 50, "Mixer_RecipeChoc");
		QueWrite(hQue, 0, "Mixer_RecipeStraw");
		QueWrite(hQue, 8, "Mixer_RecipePreMixTime");
		QueWrite(hQue, 30, "Mixer_RecipeMixTime");
		QueWrite(hQue, 8, "Mixer_RecipeMixSpeed");

	QueWrite(hRecipe, 1, "MaltMilk");

		hQue = QueOpen("MaltMilk",0);
		IF hQue <> - 1 THEN
			hQue = QueClose(hQue);
		END
		hQue = QueOpen("MaltMilk",1);
		QueWrite(hQue, 1000, "Mixer_RecipeFullMilk");
		QueWrite(hQue, 0, "Mixer_RecipeSkimMilk");
		QueWrite(hQue, 50, "Mixer_RecipeSugar");
		QueWrite(hQue, 50, "Mixer_RecipeMalt");
		QueWrite(hQue, 0, "Mixer_RecipeChoc");
		QueWrite(hQue, 0, "Mixer_RecipeStraw");
		QueWrite(hQue, 15, "Mixer_RecipePreMixTime");
		QueWrite(hQue, 40, "Mixer_RecipeMixTime");
		QueWrite(hQue, 10, "Mixer_RecipeMixSpeed");
	
	QueWrite(hRecipe, 1, "ChocMalt");
	
		hQue = QueOpen("ChocMalt",0);
		IF hQue <> - 1 THEN
			hQue = QueClose(hQue);
		END
		hQue = QueOpen("ChocMalt",1)
		QueWrite(hQue, 1000, "Mixer_RecipeFullMilk");
		QueWrite(hQue, 0, "Mixer_RecipeSkimMilk");
		QueWrite(hQue, 30, "Mixer_RecipeSugar");
		QueWrite(hQue, 50, "Mixer_RecipeMalt");
		QueWrite(hQue, 50, "Mixer_RecipeChoc");
		QueWrite(hQue, 0, "Mixer_RecipeStraw");
		QueWrite(hQue, 15, "Mixer_RecipePreMixTime");
		QueWrite(hQue, 40, "Mixer_RecipeMixTime");
		QueWrite(hQue, 10, "Mixer_RecipeMixSpeed");

	TaskNew("RawMilk_Task","",0);
END


FUNCTION RawMilk_Task

	REAL	Mixer_ChocFlow;
	REAL	Mixer_StrawFlow;
	REAL	Mixer_SugarFlow;
	REAL	Mixer_MaltFlow;
	REAL	Mixer_DrainFlow;
	
	INT		hRecipe, nLength, nValue, nRecipe;
	INT currentTime;
	INT TimeDelta;
	STRING	sRecipe, sTag;
	
	WHILE (1) DO 
		TimeDelta = SysTime();
	

		//
		// Mixer Sequence
		//
		IF (EquipGetProperty("Plant.Mixer", "State",1) = "Off" OR EquipGetProperty("Plant.Mixer", "State",1) = "Maintenance") AND Mixer_Seq_STEP <> 12 AND Mixer_Seq_STEP <> 0 THEN
			 Mixer_SEQ_REQRESET = 1;
		END
		
		IF Mixer_Seq_STEP <> Mixer_Seq_NEXT THEN
			Mixer_Seq_STEP = Mixer_Seq_NEXT;
		END
		IF Mixer_SEQ_REQRESET THEN
			Mixer_Seq_NEXT = 12;
			Mixer_SEQ_REQRESET = 0;

			Mixer_ChocFeed_REQ = 0;
			Mixer_Line1Pump_REQ = 0;
			Mixer_Line2Pump_REQ = 0;
			Mixer_MaltFeed_REQ = 0;
			Mixer_StrawFeed_REQ = 0;
			Mixer_SugarFeed_REQ = 0;
			Mixer_MaltValve_REQC = 1;
			Mixer_StrawValve_REQC = 1;
			Mixer_SugarValve_REQC = 1;
			Mixer_ChocValve_REQC = 1;
			Mixer_MaltValve_REQO = 0;
			Mixer_StrawValve_REQO = 0;
			Mixer_SugarValve_REQO = 0;
			Mixer_ChocValve_REQO = 0;
			Raw_FullMilkOutPump_REQ = 0;
			Raw_SkimMilkOutPump_REQ = 0;
			Mixer_Agitator_REQ = 0;
		END
		
		SELECT CASE Mixer_Seq_STEP
		CASE 0	// Idle
				Mixer_SEQ_ON = 0;
				Mixer_SEQ_REQRESET = 0;
				Mixer_SEQ_REQSTOP = 0;
				Mixer_Seq_ID = "";
				
				/*
				  Recipes
				0 StrawSkim
				1 ChocSkim
				2 StrawMilk
				3 ChocMilk
				4 MaltMilk
				5 ChocMalt
				*/
			
				IF Mixer_Seq_MODE <> "NONE" THEN
					SELECT CASE Mixer_Seq_Mode
					CASE "ALL"
						nRecipe = Rand(6); 
					CASE "MALTONLY"
						nRecipe = 4 + Rand(2); 
					CASE "NOMALT"
						nRecipe = Rand(4); 
					CASE "SKIMONLY"
						nRecipe = Rand(2); 
					CASE "NOSKIM"
						nRecipe = 2 + Rand(4); 
					CASE "FULLONLY"
						nRecipe = 2 + Rand(2); 
					END SELECT
					QuePeek(QueOpen("Recipe_Mixer",2),nRecipe,sRecipe,16)
					
					Mixer_SEQ_RECIPE = sRecipe;
					
					hRecipe  = QueOpen(sRecipe,2);
					IF hRecipe <> -1 THEN
						nLength = QueLength(hRecipe)
						WHILE nLength > 0 DO
							nValue = nLength - 1;
							QuePeek(hRecipe, nValue, sTag,16);
							TagWrite(sTag+"_MRCP",IntToStr(nValue));
							TagWrite(sTag+"_RCP",IntToStr(nValue));
							nLength = nLength - 1;
						END
						Mixer_Seq_RDY = 1;
						Mixer_Seq_REQSTART = 1;
					END	
				END

				IF Mixer_Seq_REQSTART AND NOT Mixer_SEQ_HELD THEN
					Mixer_SEQ_NEXT = 1;
					Mixer_SEQ_ON = 1;
					
					
				END

				
		CASE 1	// Clear Actuals
				Mixer_SEQ_REQSTART = 0;
				Mixer_Agitator_REQ = 0;

/*				currentTime = TimeCurrent();
				AlarmNotifyVarChange("Mixer_RecipeFullMilk_MRCP",Mixer_RecipeFullMilk_MRCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeFullMilk_RCP",Mixer_RecipeFullMilk_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeFullMilk_ACT",Mixer_RecipeFullMilk_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeSkimMilk_MRCP",Mixer_RecipeSkimMilk_MRCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeSkimMilk_RCP",Mixer_RecipeSkimMilk_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeSkimMilk_ACT",Mixer_RecipeSkimMilk_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeSugar_MRCP",Mixer_RecipeSugar_MRCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeSugar_RCP",Mixer_RecipeSugar_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeSugar_ACT",Mixer_RecipeSugar_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeMalt_MRCP",Mixer_RecipeMalt_MRCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeMalt_RCP",Mixer_RecipeMalt_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeMalt_ACT",Mixer_RecipeMalt_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeChoc_MRCP",Mixer_RecipeChoc_MRCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeChoc_RCP",Mixer_RecipeChoc_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeChoc_ACT",Mixer_RecipeChoc_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeStraw_MRCP",Mixer_RecipeStraw_MRCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeStraw_RCP",Mixer_RecipeStraw_RCP,currentTime,0,"Cluster1");
				AlarmNotifyVarChange("Mixer_RecipeStraw_ACT",Mixer_RecipeStraw_RCP,currentTime,0,"Cluster1");
*/


				Mixer_RecipeFullMilk_ACT = 0;
				Mixer_RecipeSkimMilk_ACT = 0;
				Mixer_RecipeSugar_ACT = 0;
				Mixer_RecipeMalt_ACT = 0;
				Mixer_RecipeChoc_ACT = 0;
				Mixer_RecipeStraw_ACT = 0;
				Mixer_RecipeMixTime_ACT = 0;
				Mixer_RecipePreMixTime_ACT = 0;
				Mixer_Seq_ID = Mixer_Seq_Recipe + "["+IntToStr(Rand(9999))+"]";


				IF NOT Mixer_Seq_HELD THEN
					Mixer_Seq_Next = 2;
				END
				
		CASE 2	// Add Milk
				Raw_FullMilkOutPump_REQ = 	NOT Mixer_Seq_HELD AND (Mixer_RecipeFullMilk_RCP - Mixer_RecipeFullMilk_ACT) > 60;
				Raw_SkimMilkOutPump_REQ = 	NOT Mixer_Seq_HELD AND (Mixer_RecipeSkimMilk_RCP - Mixer_RecipeSkimMilk_ACT) > 60;
				IF NOT Mixer_Seq_HELD AND NOT Raw_FullMilkOutPump_REQ AND NOT Raw_SkimMilkOutPump_REQ THEN
//					AlarmNotifyVarChange("Mixer_RecipeFullMilk_ACT",Mixer_RecipeFullMilk_ACT,TimeCurrent())
//					AlarmNotifyVarChange("Mixer_RecipeSkimMilk_ACT",Mixer_RecipeSkimMilk_ACT,TimeCurrent())
					Mixer_Seq_Next = 3;
				END
				
		CASE 3	// PreMix
				Mixer_Agitator_REQ = 1;
				Mixer_RecipePreMixTime_ACT = Mixer_RecipePreMixTime_ACT + 1;
				IF NOT Mixer_Seq_HELD AND (Mixer_RecipePreMixTime_ACT > Mixer_RecipePreMixTime_RCP) THEN
					Mixer_Seq_Next = 4;
				END
		
		CASE 4	// Add Sugar
				IF Mixer_RecipeSugar_RCP THEN
					Mixer_SugarValve_REQO = (Mixer_RecipeSugar_RCP - Mixer_RecipeSugar_ACT) > 2
					Mixer_SugarValve_REQC = NOT Mixer_SugarValve_REQO;
					Mixer_SugarFeed_REQ = NOT (Mixer_SugarValve_CLOSED AND SecondsSince(Mixer_SugarValve_CLOSED.vt,2));
					Mixer_MaltFeed_REQ = NOT (Mixer_SugarValve_CLOSED AND SecondsSince(Mixer_SugarValve_CLOSED.vt,4));
				END
				Mixer_Agitator_REQ = 1;
				IF NOT Mixer_Seq_HELD AND (Mixer_RecipeSugar_ACT OR NOT Mixer_RecipeSugar_RCP) AND NOT Mixer_SugarFeed_REQ AND NOT Mixer_MaltFeed_REQ THEN
//					AlarmNotifyVarChange("Mixer_RecipeSugar_ACT",Mixer_RecipeSugar_ACT,TimeCurrent())
					Mixer_Seq_Next = 5;
				END
		
		CASE 5	// Add Malt
				IF Mixer_RecipeMalt_RCP THEN
					Mixer_MaltValve_REQO = (Mixer_RecipeMalt_RCP - Mixer_RecipeMalt_ACT) > 2
					Mixer_MaltValve_REQC = NOT Mixer_MaltValve_REQO;
					Mixer_MaltFeed_REQ = NOT (Mixer_MaltValve_CLOSED AND SecondsSince(Mixer_MaltValve_CLOSED.vt,2));
				END
				Mixer_Agitator_REQ = 1;
				IF NOT Mixer_Seq_HELD AND (Mixer_RecipeMalt_ACT OR NOT Mixer_RecipeMalt_RCP) AND NOT Mixer_MaltFeed_REQ THEN
//					AlarmNotifyVarChange("Mixer_RecipeMalt_ACT",Mixer_RecipeMalt_ACT,TimeCurrent())
					Mixer_Seq_Next = 6;
				END
				
		CASE 6	// Add Chocolate
				IF Mixer_RecipeChoc_RCP THEN
					Mixer_ChocValve_REQO = (Mixer_RecipeChoc_RCP - Mixer_RecipeChoc_ACT) > 2
					Mixer_ChocValve_REQC = NOT Mixer_ChocValve_REQO;
					Mixer_ChocFeed_REQ = NOT (Mixer_ChocValve_CLOSED AND SecondsSince(Mixer_ChocValve_CLOSED.vt,2));
				END
				Mixer_Agitator_REQ = 1;
				IF NOT Mixer_Seq_HELD AND (Mixer_RecipeChoc_ACT OR NOT Mixer_RecipeChoc_RCP)  AND NOT Mixer_ChocFeed_REQ THEN
//					AlarmNotifyVarChange("Mixer_RecipeChoc_ACT",Mixer_RecipeChoc_ACT,TimeCurrent())
					Mixer_Seq_Next = 7;
				END
		
		CASE 7	// Add Strawberry
				IF Mixer_RecipeStraw_RCP THEN
					Mixer_StrawValve_REQO = (Mixer_RecipeStraw_RCP - Mixer_RecipeStraw_ACT) > 2
					Mixer_StrawValve_REQC = NOT Mixer_StrawValve_REQO;
					Mixer_StrawFeed_REQ = NOT (Mixer_StrawValve_CLOSED AND SecondsSince(Mixer_StrawValve_CLOSED.vt,2));
					Mixer_ChocFeed_REQ = NOT (Mixer_StrawValve_CLOSED AND SecondsSince(Mixer_StrawValve_CLOSED.vt,4));
				END
				Mixer_Agitator_REQ = 1;
				IF NOT Mixer_Seq_HELD AND (Mixer_RecipeStraw_ACT OR NOT Mixer_RecipeStraw_RCP) AND NOT Mixer_ChocFeed_REQ AND NOT Mixer_StrawFeed_REQ THEN
//					AlarmNotifyVarChange("Mixer_RecipeStraw_ACT",Mixer_Recipestraw_ACT,TimeCurrent())
					Mixer_Seq_Next = 8;
				END
		CASE 8	// Mix Time
				Mixer_Agitator_REQ = (Mixer_RecipeMixTime_ACT < Mixer_RecipeMixTime_RCP);
				Mixer_RecipeMixTime_ACT = Mixer_RecipeMixTime_ACT + 1;
				Mixer_Agitator_SPEED = Mixer_RecipeMixSpeed_RCP;
				IF NOT Mixer_Seq_HELD AND (Mixer_RecipeMixTime_ACT > Mixer_RecipeMixTime_RCP) AND NOT Mixer_Agitator_REQ THEN
					Mixer_Seq_Next = 9;
				END
		CASE 9	// Settle
				Mixer_Agitator_SPEED = 3;
				Mixer_Agitator_REQ = NOT Bottler_Tank1_Filling AND NOT Bottler_Tank2_Filling;
				IF NOT Mixer_Seq_HELD AND SecondsSince(Mixer_Seq_Step.vt,3) AND Bottler_Tank1_Level = 0 THEN
					Mixer_Seq_Next = 9 + 1;
					Bottler_Tank1_BatchID = Mixer_Seq_ID;
					Bottler_Tank1_Filling = 1;
					Bottler_Tank1_Agitator_ON=1;
				ELSE
					IF NOT Mixer_Seq_HELD AND SecondsSince(Mixer_Seq_Step.vt,3) AND Bottler_Tank2_Level = 0 THEN
						Mixer_Seq_Next = 9 + 2;
						Bottler_Tank2_BatchID = Mixer_Seq_ID;
						Bottler_Tank2_Filling = 1;
						Bottler_Tank2_Agitator_ON=1;
					END
				END
		CASE 10	// Pump Line 1
				Mixer_Line1Pump_REQ = NOT Mixer_Seq_HELD AND Mixer_Level > 50;
				IF NOT Mixer_Seq_HELD AND NOT Mixer_Line1Pump_REQ THEN
					Mixer_Level = 0;
					Mixer_Seq_Next = 0;
					Bottler_Tank1_Filling = 0;
				END
		CASE 11	// Pump Line 2
				Mixer_Line2Pump_REQ = NOT Mixer_Seq_HELD AND Mixer_Level > 50;
				IF NOT Mixer_Seq_HELD AND NOT Mixer_Line2Pump_REQ THEN
					Mixer_Level = 0;
					Mixer_Seq_Next = 0;
					Bottler_Tank2_Filling = 0;
				END
		CASE 12	// Drain
				Mixer_DrainValve_REQO = NOT Mixer_Seq_HELD AND Mixer_Level > 50
				Mixer_DrainValve_REQC = NOT Mixer_DrainValve_REQO;
				IF NOT Mixer_Seq_HELD AND NOT Mixer_DrainValve_REQO THEN
					Mixer_Level = 0;
					Mixer_Seq_Next = 0;
				END
						
		END SELECT

		//
		// Sugar Logic
		//

		IF NOT Mixer_SugarFeed_ON THEN
			Mixer_SugarFeed_ON = Mixer_SugarFeed_REQ AND NOT Mixer_SugarFeed_MAN AND NOT Mixer_SugarFeed_FAULT;
		ELSE
			IF Mixer_SugarFeed_FAULT OR (NOT Mixer_SugarFeed_REQ AND NOT Mixer_SugarFeed_MAN) THEN
				Mixer_SugarFeed_ON = 0;
			END
		END
		IF Mixer_SugarFeed_ON AND NOT Mixer_SugarFeed_FAULT THEN
			IF (Rand(1000) = 0) THEN
				Mixer_SugarFeed_FAULT = 1;
				Mixer_SugarFeed_CLEARTIME = TimeCurrent() + Rand(60);
			END
		ELSE
			IF Mixer_SugarFeed_FAULT AND (TimeCurrent() > Mixer_SugarFeed_CLEARTIME) THEN
				Mixer_SugarFeed_FAULT = 0;
			END
		END

		//Sugar Valve
		IF NOT(Mixer_SugarValve_CLOSED OR Mixer_SugarValve_OPEN) THEN
			Mixer_SugarValve_CLOSED = 1;
		END
		IF Mixer_SugarValve_CLOSED THEN
			IF (Mixer_SugarValve_REQO AND NOT Mixer_SugarValve_MAN) OR Mixer_SugarValve_OPEN THEN
				Mixer_SugarValve_CLOSED = 0;
				Mixer_SugarValve_OPEN = 1;
			END
		END
		IF Mixer_SugarValve_OPEN THEN
			IF (Mixer_SugarValve_REQC AND NOT Mixer_SugarValve_MAN) OR Mixer_SugarValve_CLOSED  THEN
				Mixer_SugarValve_OPEN = 0;
				Mixer_SugarValve_CLOSED = 1;
			END
		END
	
		//Sugar Level Logic
		Mixer_SugarFlow = Mixer_SugarValve_OPEN * (4 + Rand(3));
		Mixer_Sugar = Mixer_Sugar - Mixer_SugarFlow
		IF Mixer_Sugar.L OR Mixer_Sugar.LL THEN
			Mixer_Sugar = Mixer_Sugar + 200 + Rand(100);
		END
		Mixer_RecipeSugar_ACT = Mixer_RecipeSugar_ACT + Mixer_SugarFlow;

		//
		// Malt Logic
		//

		IF NOT Mixer_MaltFeed_ON THEN
			Mixer_MaltFeed_ON = Mixer_MaltFeed_REQ AND NOT Mixer_MaltFeed_MAN AND NOT Mixer_MaltFeed_FAULT;
		ELSE
			IF Mixer_MaltFeed_FAULT OR (NOT Mixer_MaltFeed_REQ AND NOT Mixer_MaltFeed_MAN) THEN
				Mixer_MaltFeed_ON = 0;
			END
		END
		IF Mixer_MaltFeed_ON AND NOT Mixer_MaltFeed_FAULT THEN
			IF (Rand(1000) = 0) THEN
				Mixer_MaltFeed_FAULT = 1;
				Mixer_MaltFeed_CLEARTIME = TimeCurrent() + Rand(60);
			END
		ELSE
			IF Mixer_MaltFeed_FAULT AND (TimeCurrent() > Mixer_MaltFeed_CLEARTIME) THEN
				Mixer_MaltFeed_FAULT = 0;
			END
		END

		//Malt Valve
		IF NOT(Mixer_MaltValve_CLOSED OR Mixer_MaltValve_OPEN) THEN
			Mixer_MaltValve_CLOSED = 1;
		END
		IF Mixer_MaltValve_CLOSED THEN
			IF (Mixer_MaltValve_REQO AND NOT Mixer_MaltValve_MAN) OR Mixer_MaltValve_OPEN THEN
				Mixer_MaltValve_CLOSED = 0;
				Mixer_MaltValve_OPEN = 1;
			END
		END
		IF Mixer_MaltValve_OPEN THEN
			IF (Mixer_MaltValve_REQC AND NOT Mixer_MaltValve_MAN) OR Mixer_MaltValve_CLOSED  THEN
				Mixer_MaltValve_OPEN = 0;
				Mixer_MaltValve_CLOSED = 1;
			END
		END
	
		//Malt Level Logic
		Mixer_MaltFlow = Mixer_MaltValve_OPEN * (4 + Rand(3));
		Mixer_Malt = Mixer_Malt - Mixer_MaltFlow + ((Mixer_Malt.L OR Mixer_Malt.LL) * (200 + Rand(100)));
		Mixer_RecipeMalt_ACT = Mixer_RecipeMalt_ACT + Mixer_MaltFlow;

		//
		// Strawberry Logic
		//

		IF NOT Mixer_StrawFeed_ON THEN
			Mixer_StrawFeed_ON = Mixer_StrawFeed_REQ AND NOT Mixer_StrawFeed_MAN AND NOT Mixer_StrawFeed_FAULT;
		ELSE
			IF Mixer_StrawFeed_FAULT OR (NOT Mixer_StrawFeed_REQ AND NOT Mixer_StrawFeed_MAN) THEN
				Mixer_StrawFeed_ON = 0;
			END
		END
		IF Mixer_StrawFeed_ON AND NOT Mixer_StrawFeed_FAULT THEN
			IF (Rand(1000) = 0) THEN
				Mixer_StrawFeed_FAULT = 1;
				Mixer_StrawFeed_CLEARTIME = TimeCurrent() + Rand(60);
			END
		ELSE
			IF Mixer_StrawFeed_FAULT AND (TimeCurrent() > Mixer_StrawFeed_CLEARTIME) THEN
				Mixer_StrawFeed_FAULT = 0;
			END
		END

		//Strawberry Valve
		IF NOT(Mixer_StrawValve_CLOSED OR Mixer_StrawValve_OPEN) THEN
			Mixer_StrawValve_CLOSED = 1;
		END
		IF Mixer_StrawValve_CLOSED THEN
			IF (Mixer_StrawValve_REQO AND NOT Mixer_StrawValve_MAN) OR Mixer_StrawValve_OPEN THEN
				Mixer_StrawValve_CLOSED = 0;
				Mixer_StrawValve_OPEN = 1;
			END
		END
		IF Mixer_StrawValve_OPEN THEN
			IF (Mixer_StrawValve_REQC AND NOT Mixer_StrawValve_MAN) OR Mixer_StrawValve_CLOSED  THEN
				Mixer_StrawValve_OPEN = 0;
				Mixer_StrawValve_CLOSED = 1;
			END
		END
	
		//Strawberry Level Logic
		Mixer_StrawFlow = Mixer_StrawValve_OPEN * (4 + Rand(3));
		Mixer_Straw = Mixer_Straw - Mixer_StrawFlow + ((Mixer_Straw.L OR Mixer_Straw.LL) * (200 + Rand(100)));
		Mixer_RecipeStraw_ACT = Mixer_RecipeStraw_ACT + Mixer_StrawFlow;

		//
		// Chocolate Logic
		//

		IF NOT Mixer_ChocFeed_ON THEN
			Mixer_ChocFeed_ON = Mixer_ChocFeed_REQ AND NOT Mixer_ChocFeed_MAN AND NOT Mixer_ChocFeed_FAULT;
		ELSE
			IF Mixer_ChocFeed_FAULT OR (NOT Mixer_ChocFeed_REQ AND NOT Mixer_ChocFeed_MAN) THEN
				Mixer_ChocFeed_ON = 0;
			END
		END
		IF Mixer_ChocFeed_ON AND NOT Mixer_ChocFeed_FAULT THEN
			IF (Rand(1000) = 0) THEN
				Mixer_ChocFeed_FAULT = 1;
				Mixer_ChocFeed_CLEARTIME = TimeCurrent() + Rand(60);
			END
		ELSE
			IF Mixer_ChocFeed_FAULT AND (TimeCurrent() > Mixer_ChocFeed_CLEARTIME) THEN
				Mixer_ChocFeed_FAULT = 0;
			END
		END

		//Choc Valve
		IF NOT(Mixer_ChocValve_CLOSED OR Mixer_ChocValve_OPEN) THEN
			Mixer_ChocValve_CLOSED = 1;
		END
		IF Mixer_ChocValve_CLOSED THEN
			IF (Mixer_ChocValve_REQO AND NOT Mixer_ChocValve_MAN) OR Mixer_ChocValve_OPEN THEN
				Mixer_ChocValve_CLOSED = 0;
				Mixer_ChocValve_OPEN = 1;
			END
		END
		IF Mixer_ChocValve_OPEN THEN
			IF (Mixer_ChocValve_REQC AND NOT Mixer_ChocValve_MAN) OR Mixer_ChocValve_CLOSED  THEN
				Mixer_ChocValve_OPEN = 0;
				Mixer_ChocValve_CLOSED = 1;
			END
		END
	
		//Choc Level Logic
		Mixer_ChocFlow = Mixer_ChocValve_OPEN * (4 + Rand(3));
		Mixer_Choc = Mixer_Choc - Mixer_ChocFlow + ((Mixer_Choc.L OR Mixer_Choc.LL) * (200 + Rand(100)));
		Mixer_RecipeChoc_ACT = Mixer_RecipeChoc_ACT + Mixer_ChocFlow;


		//
		// Mixer Logic
		//

		//Agitator Device Logic
		IF NOT Mixer_Agitator_ON THEN
			Mixer_Agitator_ON = Mixer_Agitator_REQ AND NOT Mixer_Agitator_MAN AND NOT Mixer_Agitator_FAULT;
		ELSE
			IF Mixer_Agitator_FAULT OR (NOT Mixer_Agitator_REQ AND NOT Mixer_Agitator_MAN) THEN
				Mixer_Agitator_ON = 0;
			END
		END

		IF Mixer_Agitator_ON AND NOT Mixer_Agitator_FAULT AND (Mixer_Agitator_RT > Mixer_Agitator_MaintRT) THEN
			IF (Rand(120) = 0) THEN
				Mixer_Agitator_FAULT = 1;
				Mixer_Agitator_CLEARTIME = TimeCurrent() + 60 + Rand(60);
			END
		ELSE
			IF Mixer_Agitator_FAULT AND (TimeCurrent() > Mixer_Agitator_CLEARTIME) THEN
				Mixer_Agitator_FAULT = 0;
				AccControl("Mixer_Agitator_ACC", 1 );
			END
		END
	
		//Line 1 Flow
		IF NOT Mixer_Line1Pump_ON THEN
			Mixer_Line1Pump_ON = Mixer_Line1Pump_REQ AND NOT Mixer_Line1Pump_MAN AND NOT Mixer_Line1Pump_FAULT AND Bottler_Tank1_Filling;
		ELSE
			IF Mixer_Line1Pump_FAULT OR (NOT Mixer_Line1Pump_REQ AND NOT Mixer_Line1Pump_MAN) THEN
				Mixer_Line1Pump_ON = 0;
			END
		END

		IF Mixer_Line1Pump_ON AND NOT Mixer_Line1Pump_FAULT AND (Mixer_Line1Pump_RT > Mixer_Line1Pump_MaintRT) THEN
			IF (Rand(120) = 0) THEN
				Mixer_Line1Pump_FAULT = 1;
				Mixer_Line1Pump_CLEARTIME = TimeCurrent() + 300 + Rand(60);
			END
		ELSE
			IF Mixer_Line1Pump_FAULT AND (TimeCurrent() > Mixer_Line1Pump_CLEARTIME) THEN
				Mixer_Line1Pump_FAULT = 0;
				AccControl("Mixer_Line1Pump_ACC", 1 );
			END
		END

		IF NOT(Mixer_OutValve_CLOSED OR Mixer_OutValve_OPEN) THEN
			Mixer_OutValve_CLOSED = 1;
		END
		
		IF Mixer_OutValve_OPEN AND Mixer_Line1Pump_ON THEN
			SELECT CASE SecondsSince(Mixer_OutValve_OPEN.vt)
				CASE 0		Mixer_Line1Flow = 0;
				CASE 1		Mixer_Line1Flow = ( Mixer_OutValve_OPEN * Mixer_Line1Pump_ON * (Mixer_Level > 100) ) * 5 + Rand(15);
				CASE 2		Mixer_Line1Flow = ( Mixer_OutValve_OPEN * Mixer_Line1Pump_ON * (Mixer_Level > 100) ) * 20 + Rand(10);
				CASE 3		Mixer_Line1Flow = ( Mixer_OutValve_OPEN * Mixer_Line1Pump_ON * (Mixer_Level > 100) ) * 35 + Rand(10);
				CASE ELSE	
					IF Mixer_Level > 50 THEN
						Mixer_Line1Flow = ( Mixer_OutValve_OPEN * Mixer_Line1Pump_ON ) * 45 + Rand(5);
					ELSE
						Mixer_Line1Flow = Mixer_Level;
					END
			END SELECT
		ELSE
			Mixer_Line1Flow = 0;
		END

		//Line 2 Flow
		IF NOT Mixer_Line2Pump_ON THEN
			Mixer_Line2Pump_ON = Mixer_Line2Pump_REQ AND NOT Mixer_Line2Pump_MAN AND NOT Mixer_Line2Pump_FAULT AND Bottler_Tank2_Filling;
		ELSE
			IF Mixer_Line2Pump_FAULT OR (NOT Mixer_Line2Pump_REQ AND NOT Mixer_Line2Pump_MAN) THEN
				Mixer_Line2Pump_ON = 0;
			END
		END

		IF Mixer_Line2Pump_ON AND NOT Mixer_Line2Pump_FAULT AND (Mixer_Line2Pump_RT > Mixer_Line2Pump_MaintRT) THEN
			IF (Rand(120) = 0) THEN
				Mixer_Line2Pump_FAULT = 1;
				Mixer_Line2Pump_CLEARTIME = TimeCurrent() + 300 + Rand(60);
			END
		ELSE
			IF Mixer_Line2Pump_FAULT AND (TimeCurrent() > Mixer_Line2Pump_CLEARTIME) THEN
				Mixer_Line2Pump_FAULT = 0;
				AccControl("Mixer_Line2Pump_ACC", 1 );
			END
		END
		
		IF Mixer_OutValve_OPEN AND Mixer_Line2Pump_ON THEN
			SELECT CASE SecondsSince(Mixer_OutValve_OPEN.vt)
				CASE 0		Mixer_Line2Flow = 0;
				CASE 1		Mixer_Line2Flow = ( Mixer_OutValve_OPEN * Mixer_Line2Pump_ON * (Mixer_Level > 100) ) * 5 + Rand(15);
				CASE 2		Mixer_Line2Flow = ( Mixer_OutValve_OPEN * Mixer_Line2Pump_ON * (Mixer_Level > 100) ) * 20 + Rand(10);
				CASE 3		Mixer_Line2Flow = ( Mixer_OutValve_OPEN * Mixer_Line2Pump_ON * (Mixer_Level > 100) ) * 35 + Rand(10);
				CASE ELSE	
					IF Mixer_Level > 50 THEN
						Mixer_Line2Flow = ( Mixer_OutValve_OPEN * Mixer_Line2Pump_ON ) * 45 + Rand(5);
					ELSE
						Mixer_Line2Flow = Mixer_Level;
					END
			END SELECT
		ELSE
			Mixer_Line2Flow = 0;
		END



		//Mixer Drain Valve
		IF NOT(Mixer_DrainValve_CLOSED OR Mixer_DrainValve_OPEN) THEN
			Mixer_DrainValve_CLOSED = 1;
		END
		IF Mixer_DrainValve_CLOSED THEN
			IF (Mixer_DrainValve_REQO AND NOT Mixer_DrainValve_MAN) OR Mixer_DrainValve_OPEN THEN
				Mixer_DrainValve_CLOSED = 0;
				Mixer_DrainValve_OPEN = 1;
			END
		END
		IF Mixer_DrainValve_OPEN THEN
			IF (Mixer_DrainValve_REQC AND NOT Mixer_DrainValve_MAN) OR Mixer_DrainValve_CLOSED THEN
				Mixer_DrainValve_OPEN = 0;
				Mixer_DrainValve_CLOSED = 1;
			END
		END

		IF Mixer_OutValve_OPEN AND Mixer_DrainValve_OPEN THEN
			SELECT CASE SecondsSince(Mixer_DrainValve_OPEN.vt)
				CASE 0		Mixer_DrainFlow = 0;
				CASE 1		Mixer_DrainFlow = ( Mixer_OutValve_OPEN * Mixer_DrainValve_OPEN * (Mixer_Level > 100) ) * 20 + Rand(20);
				CASE 2		Mixer_DrainFlow = ( Mixer_OutValve_OPEN * Mixer_DrainValve_OPEN * (Mixer_Level > 100) ) * 40 + Rand(20);
				CASE 3		Mixer_DrainFlow = ( Mixer_OutValve_OPEN * Mixer_DrainValve_OPEN * (Mixer_Level > 100) ) * 65 + Rand(15);
				CASE ELSE	
					IF Mixer_Level > 100 THEN
						Mixer_DrainFlow = ( Mixer_OutValve_OPEN * Mixer_DrainValve_OPEN ) * 85 + Rand(15);
					ELSE
						Mixer_DrainFlow = Mixer_Level;
					END
			END SELECT
		ELSE
			Mixer_DrainFlow = 0;
		END

		//Mixer Out Valve
		IF Mixer_OutValve_CLOSED THEN
			IF (Mixer_OutValve_REQO AND NOT Mixer_OutValve_MAN) OR Mixer_OutValve_OPEN OR (Mixer_Line1Pump_ON AND SecondsSince(Mixer_Line1Pump_ON.vt,2)) OR (Mixer_Line2Pump_ON AND SecondsSince(Mixer_Line2Pump_ON.vt,2)) OR Mixer_DrainValve_OPEN THEN	
				Mixer_OutValve_CLOSED = 0;
				Mixer_OutValve_OPEN = 1;
			END
		END
		IF Mixer_OutValve_OPEN THEN
			IF (Mixer_OutValve_REQC AND NOT Mixer_OutValve_MAN) OR Mixer_OutValve_CLOSED OR NOT (Mixer_Line1Pump_ON OR Mixer_Line2Pump_ON OR Mixer_DrainValve_OPEN) THEN
				Mixer_OutValve_OPEN = 0;
				Mixer_OutValve_CLOSED = 1;
			END
		END

		//Mixer Level Logic
		Mixer_Level = Mixer_Level + Raw_FullMilkFlow + Raw_SkimMilkFlow + Mixer_SugarFlow + Mixer_MaltFlow + Mixer_ChocFlow + Mixer_StrawFlow - Mixer_Line1Flow - Mixer_Line2Flow - Mixer_DrainFlow;
		
		Bottler_Tank1_Level = Bottler_Tank1_Level + Mixer_Line1Flow;
		Bottler_Tank2_Level = Bottler_Tank2_Level + Mixer_Line2Flow;



		IF Mixer_Level > 0 THEN
			Mixer_Visc = ((Mixer_RecipeFullMilk_ACT * 1) + (Mixer_RecipeSkimMilk_ACT * 0.95) + (Mixer_RecipeSugar_ACT * 1.5) + (Mixer_RecipeMalt_ACT * 2.00) + (Mixer_RecipeChoc_ACT * 1.3) + (Mixer_RecipeStraw_ACT * 1.25)) / (Mixer_RecipeFullMilk_ACT + Mixer_RecipeSkimMilk_ACT + Mixer_RecipeSugar_ACT + Mixer_RecipeMalt_ACT + Mixer_RecipeChoc_ACT + Mixer_RecipeStraw_ACT + 1);
		ELSE
			Mixer_Visc = 1.0
		END
		
		//
		// Full Milk Logic
		//

		// Full Milk Sequencing
		Raw_FullMilkInletPump_REQ = Raw_FullMilk.L OR Raw_FullMilk.LL OR ( Raw_FullMilkInletPump_REQ AND (Raw_FullMilk < Raw_FullMilk.High - 200) );
		Raw_FullMilkAgit_REQ = NOT Raw_FullMilk.LL;
		Raw_FullMilkChiller_REQ = 0; // NOT IMPLEMENTED NOT Raw_FullMilk.LL;

		//
		// Full Milk Device Logic
		//
			
		//Milk Filling Pump Logic
		IF NOT Raw_FullMilkInletPump_ON THEN
			Raw_FullMilkInletPump_ON = Raw_FullMilkInletPump_REQ AND NOT Raw_FullMilkInletPump_MAN AND NOT Raw_FullMilkInletPump_FAULT;
		ELSE
			IF Raw_FullMilkInletPump_FAULT OR (NOT Raw_FullMilkInletPump_REQ AND NOT Raw_FullMilkInletPump_MAN) THEN
				Raw_FullMilkInletPump_ON = 0;
			END
		END

		IF Raw_FullMilkInletPump_ON AND NOT Raw_FullMilkInletPump_FAULT AND (Raw_FullMilkInletPump_RT > Raw_FullMilkInletPump_MaintRT) THEN
			IF (Rand(120) = 0) THEN
				Raw_FullMilkInletPump_FAULT = 1;
				Raw_FullMilkInletPump_CLEARTIME = TimeCurrent() + 300 + Rand(60);
			END
		ELSE
			IF Raw_FullMilkInletPump_FAULT AND (TimeCurrent() > Raw_FullMilkInletPump_CLEARTIME) THEN
				Raw_FullMilkInletPump_FAULT = 0;
				AccControl("Raw_FullMilkInletPump_ACC", 1 );
			END
		END

		//Milk Level Logic
		Raw_FullMilk = Raw_FullMilk - Raw_FullMilkFlow + (Raw_FullMilkInletPump_ON * (185 + Rand(20)));
		Mixer_RecipeFullMilk_ACT = Mixer_RecipeFullMilk_ACT + Raw_FullMilkFlow;

		//Agitator Device Logic
		IF NOT Raw_FullMilkAgit_ON THEN
			Raw_FullMilkAgit_ON = Raw_FullMilkAgit_REQ AND NOT Raw_FullMilkAgit_MAN AND NOT Raw_FullMilkAgit_FAULT;
		ELSE
			IF Raw_FullMilkAgit_FAULT OR (NOT Raw_FullMilkAgit_REQ AND NOT Raw_FullMilkAgit_MAN) THEN
				Raw_FullMilkAgit_ON = 0;
			END
		END

		IF Raw_FullMilkAgit_ON AND NOT Raw_FullMilkAgit_FAULT AND (Raw_FullMilkAgit_RT > Raw_FullMilkAgit_MaintRT) THEN
			IF (Rand(120) = 0) THEN
				Raw_FullMilkAgit_FAULT = 1;
				Raw_FullMilkAgit_CLEARTIME = TimeCurrent() + 60 + Rand(60);
			END
		ELSE
			IF Raw_FullMilkAgit_FAULT AND (TimeCurrent() > Raw_FullMilkAgit_CLEARTIME) THEN
				Raw_FullMilkAgit_FAULT = 0;
				AccControl("Raw_FullMilkAgit_ACC", 1 );
			END
		END

		//Chiller Device Logic
		IF NOT Raw_FullMilkChiller_ON THEN
			Raw_FullMilkChiller_ON = Raw_FullMilkChiller_REQ AND NOT Raw_FullMilkChiller_MAN AND NOT Raw_FullMilkChiller_FAULT;
		ELSE
			IF Raw_FullMilkChiller_FAULT OR (NOT Raw_FullMilkChiller_REQ AND NOT Raw_FullMilkChiller_MAN) THEN
				Raw_FullMilkChiller_ON = 0;
			END
		END
		IF Raw_FullMilkChiller_ON AND NOT Raw_FullMilkChiller_FAULT THEN
			IF (Rand(1000) = 0) THEN
				Raw_FullMilkChiller_FAULT = 1;
				Raw_FullMilkChiller_CLEARTIME = TimeCurrent() + Rand(60);
			END
		ELSE
			IF Raw_FullMilkChiller_FAULT AND (TimeCurrent() > Raw_FullMilkChiller_CLEARTIME) THEN
				Raw_FullMilkChiller_FAULT = 0;
			END
		END
		Raw_FullMilkTemp_OPM = NOT Raw_FullMilkChiller_ON OR Raw_FullMilkChiller_MAN;

		//Raw Milk Flow
		IF NOT Raw_FullMilkOutPump_ON THEN
			Raw_FullMilkOutPump_ON = Raw_FullMilkOutPump_REQ AND NOT Raw_FullMilkOutPump_MAN AND NOT Raw_FullMilkOutPump_FAULT;
		ELSE
			IF Raw_FullMilkOutPump_FAULT OR (NOT Raw_FullMilkOutPump_REQ AND NOT Raw_FullMilkOutPump_MAN) THEN
				Raw_FullMilkOutPump_ON = 0;
			END
		END
		IF NOT Raw_FullMilkOutPump_FAULT AND (Raw_FullMilkOutPump_RT > Raw_FullMilkOutPump_MaintRT) AND Raw_FullMilkOutPump_ON THEN
			IF (Rand(120) = 0) THEN
				Raw_FullMilkOutPump_FAULT = 1;
				Raw_FullMilkOutPump_CLEARTIME = TimeCurrent() + 180 + Rand(180);
			END
		ELSE
			IF Raw_FullMilkOutPump_FAULT AND (TimeCurrent() > Raw_FullMilkOutPump_CLEARTIME) THEN
				Raw_FullMilkOutPump_FAULT = 0;
				AccControl("Raw_FullMilkOutPump_ACC", 1 );
			END
		END
			
		IF Mixer_FullMilkOutValve_OPEN THEN
			SELECT CASE SecondsSince(Mixer_FullMilkOutValve_OPEN.vt)
				CASE 0		Raw_FullMilkFlow = 0;
				CASE 1		Raw_FullMilkFlow = ( Mixer_FullMilkOutValve_OPEN * Raw_FullMilkOutPump_ON * (Raw_FullMilk > 100) ) * 10 + Rand(20);
				CASE 2		Raw_FullMilkFlow = ( Mixer_FullMilkOutValve_OPEN * Raw_FullMilkOutPump_ON * (Raw_FullMilk > 100) ) * 25 + Rand(15);
				CASE 3		Raw_FullMilkFlow = ( Mixer_FullMilkOutValve_OPEN * Raw_FullMilkOutPump_ON * (Raw_FullMilk > 100) ) * 35 + Rand(10);
				CASE ELSE	Raw_FullMilkFlow = ( Mixer_FullMilkOutValve_OPEN * Raw_FullMilkOutPump_ON * (Raw_FullMilk > 100) ) * 45 + Rand(5);
			END SELECT
		ELSE
			Raw_FullMilkFlow = 0;
		END

		//Raw Milk Valve
		IF NOT(Mixer_FullMilkOutValve_CLOSED OR Mixer_FullMilkOutValve_OPEN) THEN
			Mixer_FullMilkOutValve_CLOSED = 1;
		END
		IF Mixer_FullMilkOutValve_CLOSED THEN
			IF (Mixer_FullMilkOutValve_REQO AND NOT Mixer_FullMilkOutValve_MAN) OR Mixer_FullMilkOutValve_OPEN OR Raw_FullMilkOutPump_ON AND SecondsSince(Raw_FullMilkOutPump_ON.vt,2)THEN
				Mixer_FullMilkOutValve_CLOSED = 0;
				Mixer_FullMilkOutValve_OPEN = 1;
			END
		END
		IF Mixer_FullMilkOutValve_OPEN THEN
			IF (Mixer_FullMilkOutValve_REQC AND NOT Mixer_FullMilkOutValve_MAN) OR Mixer_FullMilkOutValve_CLOSED OR NOT Raw_FullMilkOutPump_ON OR Mixer_DrainValve_OPEN THEN
				Mixer_FullMilkOutValve_OPEN = 0;
				Mixer_FullMilkOutValve_CLOSED = 1;
			END
		END
	
		//Raw Milk Spray
		IF NOT(Mixer_FullMilkSpray_CLOSED OR Mixer_FullMilkSpray_OPEN) THEN
			Mixer_FullMilkSpray_CLOSED = 1;
		END
		IF Mixer_FullMilkSpray_CLOSED THEN
			IF (Mixer_FullMilkSpray_REQO AND NOT Mixer_FullMilkSpray_MAN) OR Mixer_FullMilkSpray_OPEN OR Raw_FullMilkOutPump_ON THEN
				Mixer_FullMilkSpray_CLOSED = 0;
				Mixer_FullMilkSpray_OPEN = 1;
			END
		END
		IF Mixer_FullMilkSpray_OPEN THEN
			IF (Mixer_FullMilkSpray_REQC AND NOT Mixer_FullMilkSpray_MAN) OR Mixer_FullMilkSpray_CLOSED OR NOT Raw_FullMilkOutPump_ON OR Mixer_DrainValve_OPEN THEN
				Mixer_FullMilkSpray_OPEN = 0;
				Mixer_FullMilkSpray_CLOSED = 1;
			END
		END

		//
		// Skim Milk Logic
		//
		
		// Skim Milk Sequencing
		Raw_SkimMilkInletPump_REQ = Raw_SkimMilk.L OR Raw_SkimMilk.LL OR ( Raw_SkimMilkInletPump_REQ AND (Raw_SkimMilk < Raw_SkimMilk.High - 200) );
		Raw_SkimMilkAgit_REQ = NOT Raw_SkimMilk.LL;
		Raw_SkimMilkChiller_REQ = 0; //NOT IMPLEMENTED NOT Raw_SkimMilk.LL;

		//
		// Skim Milk Device Logic
		//
			
		//Milk Filling Pump Logic
		IF NOT Raw_SkimMilkInletPump_ON THEN
			Raw_SkimMilkInletPump_ON = Raw_SkimMilkInletPump_REQ AND NOT Raw_SkimMilkInletPump_MAN AND NOT Raw_SkimMilkInletPump_FAULT;
		ELSE
			IF Raw_SkimMilkInletPump_FAULT OR (NOT Raw_SkimMilkInletPump_REQ AND NOT Raw_SkimMilkInletPump_MAN) THEN
				Raw_SkimMilkInletPump_ON = 0;
			END
		END

		IF Raw_SkimMilkInletPump_ON AND NOT Raw_SkimMilkInletPump_FAULT AND (Raw_SkimMilkInletPump_RT > Raw_SkimMilkInletPump_MaintRT) THEN
			IF (Rand(120) = 0) THEN
				Raw_SkimMilkInletPump_FAULT = 1;
				Raw_SkimMilkInletPump_CLEARTIME = TimeCurrent() + 300 + Rand(60);
			END
		ELSE
			IF Raw_SkimMilkInletPump_FAULT AND (TimeCurrent() > Raw_SkimMilkInletPump_CLEARTIME) THEN
				Raw_SkimMilkInletPump_FAULT = 0;
				AccControl("Raw_SkimMilkInletPump_ACC", 1 );
			END
		END

		//Milk Level Logic
		Raw_SkimMilk = Raw_SkimMilk - Raw_SkimMilkFlow + (Raw_SkimMilkInletPump_ON * (185 + Rand(20)));
		Mixer_RecipeSkimMilk_ACT = Mixer_RecipeSkimMilk_ACT + Raw_SkimMilkFlow;

		//Agitator Device Logic
		IF NOT Raw_SkimMilkAgit_ON THEN
			Raw_SkimMilkAgit_ON = Raw_SkimMilkAgit_REQ AND NOT Raw_SkimMilkAgit_MAN AND NOT Raw_SkimMilkAgit_FAULT;
		ELSE
			IF Raw_SkimMilkAgit_FAULT OR (NOT Raw_SkimMilkAgit_REQ AND NOT Raw_SkimMilkAgit_MAN) THEN
				Raw_SkimMilkAgit_ON = 0;
			END
		END

		IF Raw_SkimMilkAgit_ON AND NOT Raw_SkimMilkAgit_FAULT AND (Raw_SkimMilkAgit_RT > Raw_SkimMilkAgit_MaintRT) THEN
			IF (Rand(120) = 0) THEN
				Raw_SkimMilkAgit_FAULT = 1;
				Raw_SkimMilkAgit_CLEARTIME = TimeCurrent() + 60 + Rand(60);
			END
		ELSE
			IF Raw_SkimMilkAgit_FAULT AND (TimeCurrent() > Raw_SkimMilkAgit_CLEARTIME) THEN
				Raw_SkimMilkAgit_FAULT = 0;
				AccControl("Raw_SkimMilkAgit_ACC", 1 );
			END
		END

		//Chiller Device Logic
		IF NOT Raw_SkimMilkChiller_ON THEN
			Raw_SkimMilkChiller_ON = Raw_SkimMilkChiller_REQ AND NOT Raw_SkimMilkChiller_MAN AND NOT Raw_SkimMilkChiller_FAULT;
		ELSE
			IF Raw_SkimMilkChiller_FAULT OR (NOT Raw_SkimMilkChiller_REQ AND NOT Raw_SkimMilkChiller_MAN) THEN
				Raw_SkimMilkChiller_ON = 0;
			END
		END
		IF Raw_SkimMilkChiller_ON AND NOT Raw_SkimMilkChiller_FAULT THEN
			IF (Rand(1000) = 0) THEN
				Raw_SkimMilkChiller_FAULT = 1;
				Raw_SkimMilkChiller_CLEARTIME = TimeCurrent() + Rand(60);
			END
		ELSE
			IF Raw_SkimMilkChiller_FAULT AND (TimeCurrent() > Raw_SkimMilkChiller_CLEARTIME) THEN
				Raw_SkimMilkChiller_FAULT = 0;
			END
		END
		Raw_SkimMilkTemp_OPM = NOT Raw_SkimMilkChiller_ON OR Raw_SkimMilkChiller_MAN;
	
		//Raw Milk Flow
		IF NOT Raw_SkimMilkOutPump_ON THEN
			Raw_SkimMilkOutPump_ON = Raw_SkimMilkOutPump_REQ AND NOT Raw_SkimMilkOutPump_MAN AND NOT Raw_SkimMilkOutPump_FAULT;
		ELSE
			IF Raw_SkimMilkOutPump_FAULT OR (NOT Raw_SkimMilkOutPump_REQ AND NOT Raw_SkimMilkOutPump_MAN) THEN
				Raw_SkimMilkOutPump_ON = 0;
			END
		END
		IF NOT Raw_SkimMilkOutPump_FAULT AND (Raw_SkimMilkOutPump_RT > Raw_SkimMilkOutPump_MaintRT) AND Raw_SkimMilkOutPump_ON THEN
			IF (Rand(120) = 0) THEN
				Raw_SkimMilkOutPump_FAULT = 1;
				Raw_SkimMilkOutPump_CLEARTIME = TimeCurrent() + 180 + Rand(180);
			END
		ELSE
			IF Raw_SkimMilkOutPump_FAULT AND (TimeCurrent() > Raw_SkimMilkOutPump_CLEARTIME) THEN
				Raw_SkimMilkOutPump_FAULT = 0;
				AccControl("Raw_SkimMilkOutPump_ACC", 1 );
			END
		END
					
		IF Mixer_SkimMilkOutValve_OPEN THEN
			SELECT CASE SecondsSince(Mixer_SkimMilkOutValve_OPEN.vt)
				CASE 0		Raw_SkimMilkFlow = 0;
				CASE 1		Raw_SkimMilkFlow = ( Mixer_SkimMilkOutValve_OPEN * Raw_SkimMilkOutPump_ON * (Raw_SkimMilk > 100) ) * 10 + Rand(20);
				CASE 2		Raw_SkimMilkFlow = ( Mixer_SkimMilkOutValve_OPEN * Raw_SkimMilkOutPump_ON * (Raw_SkimMilk > 100) ) * 25 + Rand(15);
				CASE 3		Raw_SkimMilkFlow = ( Mixer_SkimMilkOutValve_OPEN * Raw_SkimMilkOutPump_ON * (Raw_SkimMilk > 100) ) * 35 + Rand(10);
				CASE ELSE	Raw_SkimMilkFlow = ( Mixer_SkimMilkOutValve_OPEN * Raw_SkimMilkOutPump_ON * (Raw_SkimMilk > 100) ) * 45 + Rand(5);
			END SELECT
		ELSE
			Raw_SkimMilkFlow = 0;
		END

		//Raw Milk Valve
		IF NOT(Mixer_SkimMilkOutValve_CLOSED OR Mixer_SkimMilkOutValve_OPEN) THEN
			Mixer_SkimMilkOutValve_CLOSED = 1;
		END
		IF Mixer_SkimMilkOutValve_CLOSED THEN
			IF (Mixer_SkimMilkOutValve_REQO AND NOT Mixer_SkimMilkOutValve_MAN) OR Mixer_SkimMilkOutValve_OPEN OR Raw_SkimMilkOutPump_ON AND SecondsSince(Raw_SkimMilkOutPump_ON.vt,2)THEN
				Mixer_SkimMilkOutValve_CLOSED = 0;
				Mixer_SkimMilkOutValve_OPEN = 1;
			END
		END
		IF Mixer_SkimMilkOutValve_OPEN THEN
			IF (Mixer_SkimMilkOutValve_REQC AND NOT Mixer_SkimMilkOutValve_MAN) OR Mixer_SkimMilkOutValve_CLOSED OR NOT Raw_SkimMilkOutPump_ON  THEN
				Mixer_SkimMilkOutValve_OPEN = 0;
				Mixer_SkimMilkOutValve_CLOSED = 1;
			END
		END
	
		//Raw Milk Spray
		IF NOT(Mixer_SkimMilkSpray_CLOSED OR Mixer_SkimMilkSpray_OPEN) THEN
			Mixer_SkimMilkSpray_CLOSED = 1;
		END
		IF Mixer_SkimMilkSpray_CLOSED THEN
			IF (Mixer_SkimMilkSpray_REQO AND NOT Mixer_SkimMilkSpray_MAN) OR Mixer_SkimMilkSpray_OPEN OR Raw_SkimMilkOutPump_ON THEN
				Mixer_SkimMilkSpray_CLOSED = 0;
				Mixer_SkimMilkSpray_OPEN = 1;
			END
		END
		IF Mixer_SkimMilkSpray_OPEN THEN
			IF (Mixer_SkimMilkSpray_REQC AND NOT Mixer_SkimMilkSpray_MAN) OR Mixer_SkimMilkSpray_CLOSED OR NOT Raw_SkimMilkOutPump_ON  THEN
				Mixer_SkimMilkSpray_OPEN = 0;
				Mixer_SkimMilkSpray_CLOSED = 1;
			END
		END

		SleepMS(Max(0, 1000 - SysTimeDelta(TimeDelta)));
	END	
END

FUNCTION AlarmTagEnable(STRING sFilter)

	INT		nSession;
	INT		nError;
	
	nSession = AlmTagsOpen(sFilter,"","");
	IF nSession <> - 1 THEN
		nError = AlmTagsFirst(nSession);
		WHILE NOT nError DO
			AlmTagsEnable(nSession);
			AlmTagsNext(nSession);
		END
		AlmTagsClose(nSession);
	END
END				

FUNCTION AlarmTagDisable(STRING sFilter)

	INT		nSession;
	INT		nError;
	STRING	sTag;
	
//	CodeTrace(TaskHnd(),-1);
	nSession = AlmTagsOpen(sFilter,"TAG","");
	IF nSession <> - 1 THEN
		nError = AlmTagsFirst(nSession);
		WHILE NOT nError DO
			sTag = AlmTagsGetField(nSession,"TAG");
			AlmTagsDisable(nSession);
			nError = AlmTagsNext(nSession);
		END
		AlmTagsClose(nSession);
	END
//	CodeTrace(TaskHnd(),0);
END				


INT
FUNCTION SecondsSince(TIMESTAMP tsEvent, INT nInterval = 0)
	IF nInterval THEN
		RETURN TimestampDifference(TimestampCurrent(),tsEvent,5) > nInterval;
	ELSE
		RETURN TimestampDifference(TimestampCurrent(),tsEvent,5)
	END
END